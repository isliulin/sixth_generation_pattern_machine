<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\XmcProject.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\XmcProject.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Jun 27 16:20:36 2019
<BR><P>
<H3>Maximum Stack Usage =        576 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; run_status &rArr; go_beginpoint &rArr; find_dead_center &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[8b]">__user_initial_stackheap</a>
 <LI><a href="#[c4]">_IQ10div</a>
 <LI><a href="#[c0]">_IQ10mpy</a>
 <LI><a href="#[c3]">_IQ10sqrt</a>
 <LI><a href="#[c1]">_IQ20div</a>
 <LI><a href="#[c2]">_IQ20mpy</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[1cf]">process_making_pen_signal</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[105]">rec_com</a><BR>
 <LI><a href="#[1a9]">delay_ms</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[105]">rec_com</a><BR>
 <LI><a href="#[1ab]">inpress_down</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ae]">foot_down</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[7]">BusFault_Handler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[55]">CAN0_0_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[56]">CAN0_1_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[57]">CAN0_2_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[58]">CAN0_3_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[59]">CAN0_4_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[5a]">CAN0_5_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[5b]">CAN0_6_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[5c]">CAN0_7_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[35]">CCU40_0_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[36]">CCU40_1_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[37]">CCU40_2_IRQHandler</a> from mc_pmsm.o(i.CCU40_2_IRQHandler) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[38]">CCU40_3_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[39]">CCU41_0_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[3a]">CCU41_1_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[3b]">CCU41_2_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[3c]">CCU41_3_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[3d]">CCU42_0_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[3e]">CCU42_1_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[3f]">CCU42_2_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[40]">CCU42_3_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[41]">CCU43_0_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[42]">CCU43_1_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[43]">CCU43_2_IRQHandler</a> from watch.o(i.CCU43_2_IRQHandler) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[44]">CCU43_3_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[45]">CCU80_0_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[46]">CCU80_1_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[47]">CCU80_2_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[48]">CCU80_3_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[49]">CCU81_0_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[4a]">CCU81_1_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[4b]">CCU81_2_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[4c]">CCU81_3_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[33]">DAC0_0_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[34]">DAC0_1_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[2b]">DSD0_0_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[2c]">DSD0_1_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[2d]">DSD0_2_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[2e]">DSD0_3_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[2f]">DSD0_4_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[30]">DSD0_5_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[31]">DSD0_6_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[32]">DSD0_7_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[e]">ERU0_0_IRQHandler</a> from mc_pmsm.o(i.ERU0_0_IRQHandler) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[f]">ERU0_1_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[10]">ERU0_2_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[11]">ERU0_3_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[12]">ERU1_0_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[13]">ERU1_1_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[14]">ERU1_2_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[15]">ERU1_3_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[6a]">FCE0_0_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[6b]">GPDMA0_0_IRQHandler</a> from bsp_spiflash.o(i.GPDMA0_0_IRQHandler) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[51]">HRPWM_0_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[52]">HRPWM_1_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[53]">HRPWM_2_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[54]">HRPWM_3_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[69]">LEDTS0_0_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[16]">PMU0_0_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[4d]">POSIF0_0_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[4e]">POSIF0_1_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[4f]">POSIF1_0_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[50]">POSIF1_1_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[d]">SCU_0_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[74]">SPI_MASTER_0_lInit</a> from spi_master_conf.o(i.SPI_MASTER_0_lInit) referenced from spi_master_conf.o(.constdata)
 <LI><a href="#[9]">SVC_Handler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[6d]">SystemInit</a> from system_xmc4400.o(i.SystemInit) referenced from startup_xmc4402.o(.text)
 <LI><a href="#[6c]">USB0_0_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[5d]">USIC0_0_IRQHandler</a> from communication.o(i.USIC0_0_IRQHandler) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[5e]">USIC0_1_IRQHandler</a> from communication.o(i.USIC0_1_IRQHandler) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[5f]">USIC0_2_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[60]">USIC0_3_IRQHandler</a> from spi_master_conf.o(i.USIC0_3_IRQHandler) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[61]">USIC0_4_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[62]">USIC0_5_IRQHandler</a> from spi_master_conf.o(i.USIC0_5_IRQHandler) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[63]">USIC1_0_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[64]">USIC1_1_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[65]">USIC1_2_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[66]">USIC1_3_IRQHandler</a> from bsp_uart.o(i.USIC1_3_IRQHandler) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[67]">USIC1_4_IRQHandler</a> from bsp_uart.o(i.USIC1_4_IRQHandler) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[68]">USIC1_5_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[72]">Us100_Int_Hook</a> from debug.o(i.Us100_Int_Hook) referenced from debug.o(i.debug_mode_init)
 <LI><a href="#[71]">Us500_Int_Hook</a> from debug.o(i.Us500_Int_Hook) referenced from debug.o(i.debug_mode_init)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[17]">VADC0_C0_0_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[18]">VADC0_C0_1_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[19]">VADC0_C0_2_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[1a]">VADC0_C0_3_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[1b]">VADC0_G0_0_IRQHandler</a> from app_adc.o(i.VADC0_G0_0_IRQHandler) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[1c]">VADC0_G0_1_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[1d]">VADC0_G0_2_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[1e]">VADC0_G0_3_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[1f]">VADC0_G1_0_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[20]">VADC0_G1_1_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[21]">VADC0_G1_2_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[22]">VADC0_G1_3_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[23]">VADC0_G2_0_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[24]">VADC0_G2_1_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[25]">VADC0_G2_2_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[26]">VADC0_G2_3_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[27]">VADC0_G3_0_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[28]">VADC0_G3_1_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[29]">VADC0_G3_2_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[2a]">VADC0_G3_3_IRQHandler</a> from startup_xmc4402.o(.text) referenced from startup_xmc4402.o(RESET)
 <LI><a href="#[73]">Z_Int_Hook</a> from debug.o(i.Z_Int_Hook) referenced from debug.o(i.debug_mode_init)
 <LI><a href="#[75]">__main</a> from __main.o(!!!main) referenced from startup_xmc4402.o(.text)
 <LI><a href="#[70]">spi_flash_dma_rx_handler</a> from bsp_spiflash.o(i.spi_flash_dma_rx_handler) referenced from bsp_spiflash.o(i.bsp_SpiFlashInit)
 <LI><a href="#[6f]">spi_flash_dma_tx_handler</a> from bsp_spiflash.o(i.spi_flash_dma_tx_handler) referenced from bsp_spiflash.o(i.bsp_SpiFlashInit)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[75]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[76]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[78]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[27d]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[27e]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[27f]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[280]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[281]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[7e]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[79]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[282]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[283]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[284]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[285]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[286]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[287]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[288]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[289]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[28a]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[28b]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[28c]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[28d]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[28e]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[28f]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[290]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[291]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[292]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[293]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[294]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[295]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[83]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[296]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[297]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[298]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[299]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[29a]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[29b]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[29c]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[77]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[29d]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[7b]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[7d]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[29e]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[7f]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; run_status &rArr; go_beginpoint &rArr; find_dead_center &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[29f]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[8c]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[82]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[2a0]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[84]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CAN0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>CAN0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>CAN0_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>CAN0_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CAN0_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CAN0_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CAN0_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>CAN0_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CCU40_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>CCU40_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>CCU40_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>CCU41_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>CCU41_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>CCU41_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>CCU41_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>CCU42_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>CCU42_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>CCU42_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>CCU42_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>CCU43_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>CCU43_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>CCU43_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>CCU80_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>CCU80_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>CCU80_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>CCU80_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CCU81_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CCU81_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CCU81_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CCU81_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DAC0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DAC0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DSD0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DSD0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DSD0_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DSD0_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DSD0_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DSD0_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DSD0_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DSD0_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>ERU0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>ERU0_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>ERU0_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>ERU1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>ERU1_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>ERU1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>ERU1_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>FCE0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>HRPWM_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>HRPWM_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>HRPWM_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>HRPWM_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>LEDTS0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PMU0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>POSIF0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>POSIF0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>POSIF1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>POSIF1_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SCU_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>USB0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>USIC0_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>USIC0_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>USIC1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>USIC1_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>USIC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>USIC1_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>VADC0_C0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>VADC0_C0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>VADC0_C0_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>VADC0_C0_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>VADC0_G0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>VADC0_G0_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>VADC0_G0_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>VADC0_G1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>VADC0_G1_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>VADC0_G1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>VADC0_G1_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>VADC0_G2_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>VADC0_G2_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>VADC0_G2_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>VADC0_G2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>VADC0_G3_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>VADC0_G3_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>VADC0_G3_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>VADC0_G3_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4402.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_xmc4402.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[110]"></a>arm_cos_f32</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, arm_cos_f32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepM_CurCtrl
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;park_calc
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipark_calc
</UL>

<P><STRONG><a name="[10f]"></a>arm_sin_f32</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, arm_sin_f32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepM_CurCtrl
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;park_calc
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipark_calc
</UL>

<P><STRONG><a name="[cf]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurve
</UL>

<P><STRONG><a name="[86]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[187]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashAutoWritePage
</UL>

<P><STRONG><a name="[11e]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashAutoWritePage
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[88]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2a1]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Spi_Master_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_quick
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_move
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurve
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[2a2]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2a3]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2a4]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Spi_Master_Init
</UL>

<P><STRONG><a name="[2a5]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[2a6]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[2a7]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[2a8]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2a9]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2aa]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[2ab]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[81]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2ac]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2ad]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[2ae]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2af]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2b0]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>_IQ10div</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, IQNdiv.o(_IQ10div))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_pattern
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateCurve_pattern1
</UL>

<P><STRONG><a name="[c0]"></a>_IQ10mpy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, IQNmpy.o(_IQ10mpy))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_pattern
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtractionCurve
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateCurve_pattern1
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateCurve1
</UL>

<P><STRONG><a name="[c3]"></a>_IQ10sqrt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, IQNsqrt.o(_IQ10sqrt))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_pattern
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateCurve_pattern1
</UL>

<P><STRONG><a name="[c1]"></a>_IQ20div</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, IQNdiv.o(_IQ20div))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtractionCurve
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_step
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateCurve1
</UL>

<P><STRONG><a name="[c2]"></a>_IQ20mpy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, IQNmpy.o(_IQ20mpy))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateCurve1
</UL>

<P><STRONG><a name="[1ee]"></a>BackData_version</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_spi.o(i.BackData_version))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_SpiMode_CmdTip
</UL>

<P><STRONG><a name="[8d]"></a>CAN_NODE_Init</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, can_node.o(i.CAN_NODE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CAN_NODE_Init &rArr; GLOBAL_CAN_Init &rArr; XMC_CAN_Init &rArr; XMC_CAN_Enable &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CAN_NODE_NominalBitTimeConfigure
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CAN_AllocateMOtoNodeList
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLOBAL_CAN_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_NODE_MO_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_NODE_SetNodeEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_Can_Init
</UL>

<P><STRONG><a name="[93]"></a>CAN_NODE_MO_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, can_node.o(i.CAN_NODE_MO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CAN_NODE_MO_Init &rArr; XMC_CAN_MO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CAN_MO_Config
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CAN_MO_SetEventNodePointer
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CAN_MO_EnableEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_NODE_Init
</UL>

<P><STRONG><a name="[37]"></a>CCU40_2_IRQHandler</STRONG> (Thumb, 368 bytes, Stack size 8 bytes, mc_pmsm.o(i.CCU40_2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CCU40_2_IRQHandler &rArr; motor1_control &rArr; cal_pid_p_stopn
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor1_control
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_GetInput
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Pwm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>CCU43_2_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, watch.o(i.CCU43_2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = CCU43_2_IRQHandler &rArr; function_1ms_hook &rArr; set_tension_value &rArr; io_set_logic_output &rArr; io_set_physical_output &rArr; dsp1_output_control &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;function_1ms_hook
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Watch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>CCU4_Config_Init</STRONG> (Thumb, 582 bytes, Stack size 8 bytes, bsp_ccu4.o(i.CCU4_Config_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CCU4_Config_Init &rArr; XMC_CCU4_Init &rArr; XMC_CCU4_EnableModule &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SetModuleClock
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_SetTimerCountingMode
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_SetInterruptNode
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_CompareInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_DirectionConfig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_CountConfig
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_ConfigureEvent
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_CaptureInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_Capture1Config
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_Capture0Config
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_StartPrescaler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_SetTimerPeriodMatch
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_SetTimerCompareMatch
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_EnableShadowTransfer
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Posif_Config_Init
</UL>

<P><STRONG><a name="[b0]"></a>CCU80_CC80_Config_Init</STRONG> (Thumb, 666 bytes, Stack size 8 bytes, bsp_svpwm.o(i.CCU80_CC80_Config_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CCU80_CC80_Config_Init &rArr; XMC_CCU8_Init &rArr; XMC_CCU8_EnableModule &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU8_SetModuleClock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU8_SLICE_StartConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU8_SLICE_SetTimerPeriodMatch
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU8_SLICE_SetTimerCompareMatch
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU8_SLICE_SetInterruptNode
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU8_SLICE_DeadTimeInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU8_SLICE_ConfigureEvent
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU8_SLICE_CompareInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU8_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU8_StartPrescaler
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU8_SLICE_SetShadowTransferMode
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU8_EnableShadowTransfer
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU8_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1Initial
</UL>

<P><STRONG><a name="[be]"></a>CalculateCurve1</STRONG> (Thumb, 708 bytes, Stack size 16 bytes, mc_curve.o(i.CalculateCurve1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = CalculateCurve1 &rArr; CalculateCurve_pattern1
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ20div
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ10mpy
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ20mpy
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateCurve_pattern1
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stp_StaMach
</UL>

<P><STRONG><a name="[bf]"></a>CalculateCurve_pattern1</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, mc_curve.o(i.CalculateCurve_pattern1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = CalculateCurve_pattern1
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ10mpy
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ10sqrt
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ10div
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateCurve1
</UL>

<P><STRONG><a name="[1a2]"></a>ChangeX</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, action.o(i.ChangeX))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ChangeX
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preedit_status
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conprocess_data
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_data
</UL>

<P><STRONG><a name="[1a3]"></a>ChangeY</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, action.o(i.ChangeY))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ChangeY
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preedit_status
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conprocess_data
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_data
</UL>

<P><STRONG><a name="[e]"></a>ERU0_0_IRQHandler</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, mc_pmsm.o(i.ERU0_0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ERU0_0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[12f]"></a>Encoder_Capt</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, app_stepposif.o(i.Encoder_Capt))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G0_0_IRQHandler
</UL>

<P><STRONG><a name="[c5]"></a>ExtractionCurve</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, app_spi.o(i.ExtractionCurve))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = ExtractionCurve
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ20div
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ10mpy
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepLoop_Init_reload
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_quick
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_move
</UL>

<P><STRONG><a name="[c7]"></a>Find_InitPos</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, mc_config.o(i.Find_InitPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Find_InitPos &rArr; StepM_CurCtrl
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_StepPwm
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepPwm_Update
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_StepPwm
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepM_CurCtrl
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepLoop_Init_reload
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepContrl
</UL>

<P><STRONG><a name="[116]"></a>Find_StartPoint</STRONG> (Thumb, 344 bytes, Stack size 12 bytes, mc_config.o(i.Find_StartPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Find_StartPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stp_StaMach
</UL>

<P><STRONG><a name="[107]"></a>ForFunc</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, motor_drive.o(i.ForFunc))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimulateSpiCmd
</UL>

<P><STRONG><a name="[8e]"></a>GLOBAL_CAN_Init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, global_can.o(i.GLOBAL_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GLOBAL_CAN_Init &rArr; XMC_CAN_Init &rArr; XMC_CAN_Enable &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_NODE_Init
</UL>

<P><STRONG><a name="[6b]"></a>GPDMA0_0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_spiflash.o(i.GPDMA0_0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPDMA0_0_IRQHandler &rArr; XMC_DMA_IRQHandler &rArr; XMC_DMA_CH_ClearEventStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>GetCurve</STRONG> (Thumb, 232 bytes, Stack size 88 bytes, app_spi.o(i.GetCurve))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_quick
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_move
</UL>

<P><STRONG><a name="[d1]"></a>GetPmsm1Angle</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_pmsm.o(i.GetPmsm1Angle))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPmsm1Angle_Adjust
</UL>

<P><STRONG><a name="[d0]"></a>GetPmsm1Angle_Adjust</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, action.o(i.GetPmsm1Angle_Adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetPmsm1Angle_Adjust
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPmsm1Angle
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prewind_status
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preedit_status
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki04_status
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Us100_Int_Hook
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zoom_in_one_stitch
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trim_action
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_sewing
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;special_sewing
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_move_func
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_stop
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_xy
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_dead_center
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_position
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SewingReverse
</UL>

<P><STRONG><a name="[1e4]"></a>GetPmsm1SpeedRef</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_pmsm.o(i.GetPmsm1SpeedRef))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;needle_down
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_running_for_dead_center
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_dead_center
</UL>

<P><STRONG><a name="[21f]"></a>GetPmsm1Version</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mc_pmsm.o(i.GetPmsm1Version))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d4]"></a>Install_MC_Int_Fun</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mc_pmsm.o(i.Install_MC_Int_Fun))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Install_MC_Int_Fun
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_mode_init
</UL>

<P><STRONG><a name="[d3]"></a>Judge_Quadrant</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, action.o(i.Judge_Quadrant))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PBP_Line
</UL>

<P><STRONG><a name="[11c]"></a>OSCHP_GetFrequency</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system_xmc4400.o(i.OSCHP_GetFrequency))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockSetup
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_StartSystemPll
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_EnableHighPerformanceOscillator
</UL>

<P><STRONG><a name="[d2]"></a>PBP_Line</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, action.o(i.PBP_Line))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = PBP_Line &rArr; add_one_action &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_one_action
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Quadrant
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
</UL>

<P><STRONG><a name="[22c]"></a>Pid_calc</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, mc_pmsm.o(i.Pid_calc))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor1_control
</UL>

<P><STRONG><a name="[103]"></a>Pmsm1Control</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, mc_pmsm.o(i.Pmsm1Control))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prewind_status
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki04_status
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trim_action
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;special_sewing
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mainmotor_stop_angle
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_stop
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;needle_down
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_running_for_dead_center
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_dead_center
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_data
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SewingReverse
</UL>

<P><STRONG><a name="[d5]"></a>Pmsm1FindZero</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, mc_pmsm.o(i.Pmsm1FindZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Pmsm1FindZero
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_GetInput
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_mainmotor
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmsm1_100us_task
</UL>

<P><STRONG><a name="[d6]"></a>Pmsm1Initial</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, mc_pmsm.o(i.Pmsm1Initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Pmsm1Initial &rArr; VADC_Config_Init &rArr; XMC_VADC_GROUP_Init &rArr; XMC_VADC_GROUP_InputClassInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC_Config_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepM_Para_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Posif_Config_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU80_CC80_Config_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_SetOutputLow
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_mainmotor
</UL>

<P><STRONG><a name="[1c4]"></a>Pmsm1ParaAddSend</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mc_pmsm.o(i.Pmsm1ParaAddSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Pmsm1ParaAddSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_mainmotor
</UL>

<P><STRONG><a name="[db]"></a>Pmsm1PowerOnWatch</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mc_pmsm.o(i.Pmsm1PowerOnWatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Pmsm1PowerOnWatch
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_GetInput
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_mainmotor
</UL>

<P><STRONG><a name="[1eb]"></a>Pmsm1RunningWatch</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, mc_pmsm.o(i.Pmsm1RunningWatch))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;function_1ms_hook
</UL>

<P><STRONG><a name="[20a]"></a>Pmsm1TaskCheck</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_pmsm.o(i.Pmsm1TaskCheck))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_mainmotor
</UL>

<P><STRONG><a name="[1a7]"></a>Pmsm1_Run_State</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_pmsm.o(i.Pmsm1_Run_State))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wind_status
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prewind_status
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_status
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki04_status
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zoom_in_one_stitch
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trim_action
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_sewing
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_stop
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;needle_down
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_running_for_dead_center
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_dead_center
</UL>

<P><STRONG><a name="[d7]"></a>Posif_Config_Init</STRONG> (Thumb, 272 bytes, Stack size 8 bytes, bsp_posif.o(i.Posif_Config_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Posif_Config_Init &rArr; CCU4_Config_Init &rArr; XMC_CCU4_Init &rArr; XMC_CCU4_EnableModule &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_POSIF_QD_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_POSIF_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_ERU_OGU_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_ERU_ETL_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU4_Config_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_StartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1Initial
</UL>

<P><STRONG><a name="[115]"></a>Quard_decode_check_false</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, mc_stamach.o(i.Quard_decode_check_false))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stp_StaMach
</UL>

<P><STRONG><a name="[e1]"></a>Rs485_ReceiveEn</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_rs485.o(i.Rs485_ReceiveEn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Rs485_ReceiveEn
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_SetOutputLow
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC0_0_IRQHandler
</UL>

<P><STRONG><a name="[e3]"></a>Rs485_WriteEn</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_rs485.o(i.Rs485_WriteEn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Rs485_WriteEn
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_SetOutputHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tra_com
</UL>

<P><STRONG><a name="[e5]"></a>Run_move</STRONG> (Thumb, 564 bytes, Stack size 56 bytes, mc_driver.o(i.Run_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Run_move &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurve
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtractionCurve
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_step
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_SpiMode_CmdTip
</UL>

<P><STRONG><a name="[e7]"></a>Run_pattern</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, mc_driver.o(i.Run_pattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Run_pattern
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ10mpy
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepLoop_Init_reload
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ10sqrt
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ10div
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_fifo_recISR
</UL>

<P><STRONG><a name="[e8]"></a>Run_quick</STRONG> (Thumb, 670 bytes, Stack size 56 bytes, mc_driver.o(i.Run_quick))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurve
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtractionCurve
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_SpiMode_CmdTip
</UL>

<P><STRONG><a name="[e6]"></a>Run_step</STRONG> (Thumb, 362 bytes, Stack size 16 bytes, mc_driver.o(i.Run_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Run_step
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ20div
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepLoop_Init_reload
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stp_StaMach
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_move
</UL>

<P><STRONG><a name="[e9]"></a>SCU_Config_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_scu.o(i.SCU_Config_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SCU_Config_Init &rArr; XMC_SCU_CLOCK_Init &rArr; XMC_SCU_CLOCK_StartSystemPll &rArr; XMC_SCU_CLOCK_StepSystemPllFrequency &rArr; XMC_SCU_lDelay &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_HIB_SetRtcClockSource
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_StartUsbPll
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[f3]"></a>SPI_MASTER_Transfer</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, spi_master.o(i.SPI_MASTER_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_MASTER_Transfer &rArr; SPI_MASTER_lReceivePolling &rArr; SPI_MASTER_lStdRBUFFlush
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MASTER_lReceivePolling
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Mster_WR
</UL>

<P><STRONG><a name="[fe]"></a>SVPWM_t_calc</STRONG> (Thumb, 2026 bytes, Stack size 64 bytes, app_svpwm.o(i.SVPWM_t_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SVPWM_t_calc &rArr; park_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;park_calc
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipark_calc
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clarke_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Svpwm_Update
</UL>

<P><STRONG><a name="[102]"></a>SewingReverse</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, action.o(i.SewingReverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = SewingReverse &rArr; special_sewing &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_com
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1Control
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;special_sewing
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPmsm1Angle_Adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
</UL>

<P><STRONG><a name="[106]"></a>SimulateSpiCmd</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, motor_drive.o(i.SimulateSpiCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_fifo_recISR
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_wirte_lowlevel
</UL>

<P><STRONG><a name="[109]"></a>SingleIo_Init</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, bsp_gpio.o(i.SingleIo_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SingleIo_Init &rArr; XMC_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[23d]"></a>Start_Pwm</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_svpwm.o(i.Start_Pwm))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmsm1_100us_task
</UL>

<P><STRONG><a name="[ca]"></a>Start_StepPwm</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_stepwm.o(i.Start_StepPwm))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepContrl
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_InitPos
</UL>

<P><STRONG><a name="[10a]"></a>StepContrl</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, mc_step.o(i.StepContrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = StepContrl &rArr; Stp_StaMach &rArr; StepLoop_Update_close &rArr; StepM_PosCtrl &rArr; StepM_SpdCtrl &rArr; StepM_CurCtrl
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stp_StaMach
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_StepPwm
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepPwm_Update
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_StepPwm
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_InitPos
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepLoop_Init_reload
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G0_0_IRQHandler
</UL>

<P><STRONG><a name="[117]"></a>StepLoop_Init</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, mc_curve.o(i.StepLoop_Init))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stp_StaMach
</UL>

<P><STRONG><a name="[c6]"></a>StepLoop_Init_reload</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, mc_curve.o(i.StepLoop_Init_reload))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepContrl
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_InitPos
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_pattern
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtractionCurve
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_step
</UL>

<P><STRONG><a name="[10c]"></a>StepLoop_Update_close</STRONG> (Thumb, 514 bytes, Stack size 32 bytes, mc_stamach.o(i.StepLoop_Update_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = StepLoop_Update_close &rArr; StepM_PosCtrl &rArr; StepM_SpdCtrl &rArr; StepM_CurCtrl
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepM_PosCtrl
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepM_CurCtrl
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stp_StaMach
</UL>

<P><STRONG><a name="[c8]"></a>StepM_CurCtrl</STRONG> (Thumb, 422 bytes, Stack size 40 bytes, mc_control.o(i.StepM_CurCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = StepM_CurCtrl
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_InitPos
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepM_SpdCtrl
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepLoop_Update_close
</UL>

<P><STRONG><a name="[da]"></a>StepM_Para_init</STRONG> (Thumb, 430 bytes, Stack size 8 bytes, mc_control.o(i.StepM_Para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StepM_Para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1Initial
</UL>

<P><STRONG><a name="[10e]"></a>StepM_PosCtrl</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, mc_control.o(i.StepM_PosCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = StepM_PosCtrl &rArr; StepM_SpdCtrl &rArr; StepM_CurCtrl
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepM_SpdCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepLoop_Update_close
</UL>

<P><STRONG><a name="[112]"></a>StepM_SPWM_calc</STRONG> (Thumb, 584 bytes, Stack size 0 bytes, app_stepwm.o(i.StepM_SPWM_calc))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepPwm_Update
</UL>

<P><STRONG><a name="[111]"></a>StepM_SpdCtrl</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, mc_control.o(i.StepM_SpdCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = StepM_SpdCtrl &rArr; StepM_CurCtrl
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepM_CurCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepM_PosCtrl
</UL>

<P><STRONG><a name="[1c3]"></a>StepMotor1CurveBind</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motor_drive.o(i.StepMotor1CurveBind))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_mainmotor
</UL>

<P><STRONG><a name="[1c2]"></a>StepMotor1ParamBind</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, motor_drive.o(i.StepMotor1ParamBind))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_mainmotor
</UL>

<P><STRONG><a name="[c9]"></a>StepPwm_Update</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, app_stepwm.o(i.StepPwm_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StepPwm_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU8_SLICE_SetTimerCompareMatch
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepM_SPWM_calc
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU8_EnableShadowTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepContrl
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_InitPos
</UL>

<P><STRONG><a name="[9c]"></a>Stop_Pwm</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, app_svpwm.o(i.Stop_Pwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Stop_Pwm
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU8_SLICE_SetTimerCompareMatch
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU8_EnableShadowTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU40_2_IRQHandler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmsm1_100us_task
</UL>

<P><STRONG><a name="[cb]"></a>Stop_StepPwm</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, app_stepwm.o(i.Stop_StepPwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Stop_StepPwm
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU8_SLICE_SetTimerCompareMatch
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU8_EnableShadowTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepContrl
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_InitPos
</UL>

<P><STRONG><a name="[10b]"></a>Stp_StaMach</STRONG> (Thumb, 2026 bytes, Stack size 16 bytes, mc_stamach.o(i.Stp_StaMach))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = Stp_StaMach &rArr; StepLoop_Update_close &rArr; StepM_PosCtrl &rArr; StepM_SpdCtrl &rArr; StepM_CurCtrl
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepLoop_Update_close
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quard_decode_check_false
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_step
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepLoop_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateCurve1
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_StartPoint
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepContrl
</UL>

<P><STRONG><a name="[118]"></a>Svpwm_Update</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, app_svpwm.o(i.Svpwm_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Svpwm_Update &rArr; SVPWM_t_calc &rArr; park_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU8_SLICE_SetTimerCompareMatch
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVPWM_t_calc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU8_EnableShadowTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmsm1_100us_task
</UL>

<P><STRONG><a name="[9d]"></a>Sys_Watch</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, watch.o(i.Sys_Watch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sys_Watch
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_GetInput
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU43_2_IRQHandler
</UL>

<P><STRONG><a name="[11a]"></a>SystemCoreClockSetup</STRONG> (Thumb, 484 bytes, Stack size 8 bytes, system_xmc4400.o(i.SystemCoreClockSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemCoreClockSetup &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCHP_GetFrequency
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[11d]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, system_xmc4400.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCHP_GetFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockSetup
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_lDelay
</UL>

<P><STRONG><a name="[11f]"></a>SystemCoreSetup</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, system_xmc4400.o(i.SystemCoreSetup))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[6d]"></a>SystemInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, system_xmc4400.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemInit &rArr; SystemCoreClockSetup &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreSetup
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockSetup
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(.text)
</UL>
<P><STRONG><a name="[120]"></a>System_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, app_init.o(i.System_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = System_Init &rArr; bsp_SpiFlashInit &rArr; XMC_SPI_CH_Init &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Watch_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_UartInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Spi_Master_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Rs485Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC_Config_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleIo_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Config_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485_ReceiveEn
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_SetOutputLow
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_DacInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_Can_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>USIC0_0_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, communication.o(i.USIC0_0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USIC0_0_IRQHandler &rArr; Rs485_ReceiveEn
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485_ReceiveEn
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>USIC0_1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, communication.o(i.USIC0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USIC0_1_IRQHandler &rArr; ui_receive_fsm &rArr; verify
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_GetReceivedData
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_receive_fsm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>USIC0_3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, spi_master_conf.o(i.USIC0_3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>USIC0_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, spi_master_conf.o(i.USIC0_5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>USIC1_3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_uart.o(i.USIC1_3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>USIC1_4_IRQHandler</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, bsp_uart.o(i.USIC1_4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USIC1_4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_GetReceivedData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>Us100_Int_Hook</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, debug.o(i.Us100_Int_Hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Us100_Int_Hook &rArr; app_DacSetValue_da0
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_DacSetValue_da0
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPmsm1Angle_Adjust
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug.o(i.debug_mode_init)
</UL>
<P><STRONG><a name="[71]"></a>Us500_Int_Hook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, debug.o(i.Us500_Int_Hook))
<BR>[Address Reference Count : 1]<UL><LI> debug.o(i.debug_mode_init)
</UL>
<P><STRONG><a name="[1b]"></a>VADC0_G0_0_IRQHandler</STRONG> (Thumb, 418 bytes, Stack size 8 bytes, app_adc.o(i.VADC0_G0_0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = VADC0_G0_0_IRQHandler &rArr; pmsm1_100us_task &rArr; Svpwm_Update &rArr; SVPWM_t_calc &rArr; park_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_GetCaptureRegisterValue
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmsm1_100us_task
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepContrl
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Capt
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_GetResult
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4402.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>VADC_Config_Init</STRONG> (Thumb, 430 bytes, Stack size 8 bytes, bsp_adc.o(i.VADC_Config_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = VADC_Config_Init &rArr; XMC_VADC_GROUP_Init &rArr; XMC_VADC_GROUP_InputClassInit
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_SetPowerMode
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_QueueInit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_ChannelInit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GLOBAL_StartupCalibration
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GLOBAL_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_ResultInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_QueueInsertChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1Initial
</UL>

<P><STRONG><a name="[92]"></a>XMC_CAN_AllocateMOtoNodeList</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, xmc_can.o(i.XMC_CAN_AllocateMOtoNodeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XMC_CAN_AllocateMOtoNodeList
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_NODE_Init
</UL>

<P><STRONG><a name="[13b]"></a>XMC_CAN_Enable</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, xmc_can.o(i.XMC_CAN_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XMC_CAN_Enable &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_RESET_DeassertPeripheralReset
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_UngatePeripheralClock
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CAN_Init
</UL>

<P><STRONG><a name="[cc]"></a>XMC_CAN_Init</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, xmc_can.o(i.XMC_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = XMC_CAN_Init &rArr; XMC_CAN_Enable &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetPeripheralClockFrequency
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CAN_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLOBAL_CAN_Init
</UL>

<P><STRONG><a name="[94]"></a>XMC_CAN_MO_Config</STRONG> (Thumb, 176 bytes, Stack size 20 bytes, xmc_can.o(i.XMC_CAN_MO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = XMC_CAN_MO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CAN_MO_UpdateData
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_NODE_MO_Init
</UL>

<P><STRONG><a name="[140]"></a>XMC_CAN_MO_UpdateData</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, xmc_can.o(i.XMC_CAN_MO_UpdateData))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CAN_MO_Config
</UL>

<P><STRONG><a name="[98]"></a>XMC_CAN_NODE_EnableEvent</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, xmc_can.o(i.XMC_CAN_NODE_EnableEvent))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_NODE_SetNodeEvents
</UL>

<P><STRONG><a name="[8f]"></a>XMC_CAN_NODE_NominalBitTimeConfigure</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, xmc_can.o(i.XMC_CAN_NODE_NominalBitTimeConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = XMC_CAN_NODE_NominalBitTimeConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_NODE_Init
</UL>

<P><STRONG><a name="[141]"></a>XMC_CCU4_EnableModule</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, xmc_ccu4.o(i.XMC_CCU4_EnableModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XMC_CCU4_EnableModule &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_EnableClock
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_RESET_DeassertPeripheralReset
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_UngatePeripheralClock
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_Init
</UL>

<P><STRONG><a name="[a0]"></a>XMC_CCU4_Init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, xmc_ccu4.o(i.XMC_CCU4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = XMC_CCU4_Init &rArr; XMC_CCU4_EnableModule &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_EnableModule
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Watch_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU4_Config_Init
</UL>

<P><STRONG><a name="[ac]"></a>XMC_CCU4_SLICE_Capture0Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xmc_ccu4.o(i.XMC_CCU4_SLICE_Capture0Config))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU4_Config_Init
</UL>

<P><STRONG><a name="[ad]"></a>XMC_CCU4_SLICE_Capture1Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xmc_ccu4.o(i.XMC_CCU4_SLICE_Capture1Config))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU4_Config_Init
</UL>

<P><STRONG><a name="[a9]"></a>XMC_CCU4_SLICE_CaptureInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, xmc_ccu4.o(i.XMC_CCU4_SLICE_CaptureInit))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU4_Config_Init
</UL>

<P><STRONG><a name="[a3]"></a>XMC_CCU4_SLICE_CompareInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, xmc_ccu4.o(i.XMC_CCU4_SLICE_CompareInit))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Watch_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU4_Config_Init
</UL>

<P><STRONG><a name="[ae]"></a>XMC_CCU4_SLICE_ConfigureEvent</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, xmc_ccu4.o(i.XMC_CCU4_SLICE_ConfigureEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XMC_CCU4_SLICE_ConfigureEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU4_Config_Init
</UL>

<P><STRONG><a name="[aa]"></a>XMC_CCU4_SLICE_CountConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xmc_ccu4.o(i.XMC_CCU4_SLICE_CountConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU4_Config_Init
</UL>

<P><STRONG><a name="[ab]"></a>XMC_CCU4_SLICE_DirectionConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xmc_ccu4.o(i.XMC_CCU4_SLICE_DirectionConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU4_Config_Init
</UL>

<P><STRONG><a name="[130]"></a>XMC_CCU4_SLICE_GetCaptureRegisterValue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, xmc_ccu4.o(i.XMC_CCU4_SLICE_GetCaptureRegisterValue))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G0_0_IRQHandler
</UL>

<P><STRONG><a name="[a7]"></a>XMC_CCU4_SLICE_SetInterruptNode</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, xmc_ccu4.o(i.XMC_CCU4_SLICE_SetInterruptNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XMC_CCU4_SLICE_SetInterruptNode
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Watch_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU4_Config_Init
</UL>

<P><STRONG><a name="[a5]"></a>XMC_CCU4_SLICE_SetTimerCountingMode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, xmc_ccu4.o(i.XMC_CCU4_SLICE_SetTimerCountingMode))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Watch_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU4_Config_Init
</UL>

<P><STRONG><a name="[a2]"></a>XMC_CCU4_SetModuleClock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xmc_ccu4.o(i.XMC_CCU4_SetModuleClock))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Watch_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU4_Config_Init
</UL>

<P><STRONG><a name="[143]"></a>XMC_CCU8_EnableModule</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, xmc_ccu8.o(i.XMC_CCU8_EnableModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XMC_CCU8_EnableModule &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_EnableClock
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_RESET_DeassertPeripheralReset
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_UngatePeripheralClock
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU8_Init
</UL>

<P><STRONG><a name="[b1]"></a>XMC_CCU8_Init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, xmc_ccu8.o(i.XMC_CCU8_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = XMC_CCU8_Init &rArr; XMC_CCU8_EnableModule &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU8_EnableModule
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU80_CC80_Config_Init
</UL>

<P><STRONG><a name="[b4]"></a>XMC_CCU8_SLICE_CompareInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, xmc_ccu8.o(i.XMC_CCU8_SLICE_CompareInit))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU80_CC80_Config_Init
</UL>

<P><STRONG><a name="[b9]"></a>XMC_CCU8_SLICE_ConfigureEvent</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, xmc_ccu8.o(i.XMC_CCU8_SLICE_ConfigureEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XMC_CCU8_SLICE_ConfigureEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU80_CC80_Config_Init
</UL>

<P><STRONG><a name="[bc]"></a>XMC_CCU8_SLICE_DeadTimeInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, xmc_ccu8.o(i.XMC_CCU8_SLICE_DeadTimeInit))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU80_CC80_Config_Init
</UL>

<P><STRONG><a name="[bb]"></a>XMC_CCU8_SLICE_SetInterruptNode</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, xmc_ccu8.o(i.XMC_CCU8_SLICE_SetInterruptNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XMC_CCU8_SLICE_SetInterruptNode
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU80_CC80_Config_Init
</UL>

<P><STRONG><a name="[b6]"></a>XMC_CCU8_SLICE_SetTimerCompareMatch</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, xmc_ccu8.o(i.XMC_CCU8_SLICE_SetTimerCompareMatch))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU80_CC80_Config_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_StepPwm
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepPwm_Update
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Svpwm_Update
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Pwm
</UL>

<P><STRONG><a name="[b5]"></a>XMC_CCU8_SLICE_SetTimerPeriodMatch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, xmc_ccu8.o(i.XMC_CCU8_SLICE_SetTimerPeriodMatch))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU80_CC80_Config_Init
</UL>

<P><STRONG><a name="[ba]"></a>XMC_CCU8_SLICE_StartConfig</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, xmc_ccu8.o(i.XMC_CCU8_SLICE_StartConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = XMC_CCU8_SLICE_StartConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU80_CC80_Config_Init
</UL>

<P><STRONG><a name="[b3]"></a>XMC_CCU8_SetModuleClock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xmc_ccu8.o(i.XMC_CCU8_SetModuleClock))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU80_CC80_Config_Init
</UL>

<P><STRONG><a name="[144]"></a>XMC_DAC_CH_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, xmc_dac.o(i.XMC_DAC_CH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XMC_DAC_CH_Init &rArr; XMC_DAC_Enable &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DAC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DacInit
</UL>

<P><STRONG><a name="[146]"></a>XMC_DAC_CH_SetFrequency</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, xmc_dac.o(i.XMC_DAC_CH_SetFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XMC_DAC_CH_SetFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetPeripheralClockFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DAC_CH_StartDataMode
</UL>

<P><STRONG><a name="[147]"></a>XMC_DAC_CH_StartDataMode</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, xmc_dac.o(i.XMC_DAC_CH_StartDataMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = XMC_DAC_CH_StartDataMode &rArr; XMC_DAC_CH_SetFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DAC_CH_SetFrequency
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DAC_CH_SetTrigger
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DAC_CH_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DacInit
</UL>

<P><STRONG><a name="[145]"></a>XMC_DAC_Enable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, xmc_dac.o(i.XMC_DAC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XMC_DAC_Enable &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_RESET_DeassertPeripheralReset
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_UngatePeripheralClock
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DAC_CH_Init
</UL>

<P><STRONG><a name="[14e]"></a>XMC_DMA_CH_ClearEventStatus</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, xmc_dma.o(i.XMC_DMA_CH_ClearEventStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XMC_DMA_CH_ClearEventStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DMA_IRQHandler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DMA_CH_Init
</UL>

<P><STRONG><a name="[191]"></a>XMC_DMA_CH_EnableEvent</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, xmc_dma.o(i.XMC_DMA_CH_EnableEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XMC_DMA_CH_EnableEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashInit
</UL>

<P><STRONG><a name="[14a]"></a>XMC_DMA_CH_Init</STRONG> (Thumb, 800 bytes, Stack size 32 bytes, xmc_dma.o(i.XMC_DMA_CH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = XMC_DMA_CH_Init &rArr; XMC_DMA_IsEnabled &rArr; XMC_SCU_RESET_IsPeripheralResetAsserted
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DMA_IsEnabled
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DMA_EnableRequestLine
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DMA_CH_IsEnabled
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DMA_CH_ClearEventStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashInit
</UL>

<P><STRONG><a name="[14c]"></a>XMC_DMA_CH_IsEnabled</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, xmc_dma.o(i.XMC_DMA_CH_IsEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DMA_CH_Init
</UL>

<P><STRONG><a name="[192]"></a>XMC_DMA_CH_SetEventHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, xmc_dma.o(i.XMC_DMA_CH_SetEventHandler))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashInit
</UL>

<P><STRONG><a name="[14f]"></a>XMC_DMA_Enable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, xmc_dma.o(i.XMC_DMA_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XMC_DMA_Enable &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_RESET_DeassertPeripheralReset
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_UngatePeripheralClock
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DMA_Init
</UL>

<P><STRONG><a name="[14d]"></a>XMC_DMA_EnableRequestLine</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, xmc_dma.o(i.XMC_DMA_EnableRequestLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = XMC_DMA_EnableRequestLine
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DMA_CH_Init
</UL>

<P><STRONG><a name="[cd]"></a>XMC_DMA_IRQHandler</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, xmc_dma.o(i.XMC_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = XMC_DMA_IRQHandler &rArr; XMC_DMA_CH_ClearEventStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DMA_CH_ClearEventStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA0_0_IRQHandler
</UL>

<P><STRONG><a name="[150]"></a>XMC_DMA_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, xmc_dma.o(i.XMC_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XMC_DMA_Init &rArr; XMC_DMA_Enable &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DMA_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashInit
</UL>

<P><STRONG><a name="[14b]"></a>XMC_DMA_IsEnabled</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, xmc_dma.o(i.XMC_DMA_IsEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XMC_DMA_IsEnabled &rArr; XMC_SCU_RESET_IsPeripheralResetAsserted
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_RESET_IsPeripheralResetAsserted
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_IsPeripheralClockGated
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DMA_CH_Init
</UL>

<P><STRONG><a name="[dc]"></a>XMC_ERU_ETL_Init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, xmc_eru.o(i.XMC_ERU_ETL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XMC_ERU_ETL_Init &rArr; XMC_ERU_Enable &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_ERU_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Posif_Config_Init
</UL>

<P><STRONG><a name="[153]"></a>XMC_ERU_Enable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, xmc4_eru.o(i.XMC_ERU_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XMC_ERU_Enable &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_RESET_DeassertPeripheralReset
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_UngatePeripheralClock
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_ERU_OGU_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_ERU_ETL_Init
</UL>

<P><STRONG><a name="[dd]"></a>XMC_ERU_OGU_Init</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, xmc_eru.o(i.XMC_ERU_OGU_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XMC_ERU_OGU_Init &rArr; XMC_ERU_Enable &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_ERU_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Posif_Config_Init
</UL>

<P><STRONG><a name="[90]"></a>XMC_GPIO_Init</STRONG> (Thumb, 166 bytes, Stack size 12 bytes, xmc4_gpio.o(i.XMC_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = XMC_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_UartInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Spi_Master_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Rs485Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC_Config_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleIo_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_NODE_Init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GpioWatchInit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MASTER_0_lInit
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_sc0723_bsp_init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_sc0720a_bsp_init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_sc0720_bsp_init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_sc0719_bsp_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Posif_Config_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU80_CC80_Config_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmsm1_100us_task
</UL>

<P><STRONG><a name="[154]"></a>XMC_POSIF_Enable</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, xmc_posif.o(i.XMC_POSIF_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XMC_POSIF_Enable &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_EnableClock
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_RESET_DeassertPeripheralReset
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_UngatePeripheralClock
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_POSIF_Init
</UL>

<P><STRONG><a name="[de]"></a>XMC_POSIF_Init</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, xmc_posif.o(i.XMC_POSIF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XMC_POSIF_Init &rArr; XMC_POSIF_Enable &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_POSIF_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Posif_Config_Init
</UL>

<P><STRONG><a name="[df]"></a>XMC_POSIF_QD_Init</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, xmc_posif.o(i.XMC_POSIF_QD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = XMC_POSIF_QD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Posif_Config_Init
</UL>

<P><STRONG><a name="[161]"></a>XMC_SCU_CLOCK_DisableSystemPll</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, xmc4_scu.o(i.XMC_SCU_CLOCK_DisableSystemPll))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[142]"></a>XMC_SCU_CLOCK_EnableClock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xmc4_scu.o(i.XMC_SCU_CLOCK_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU8_EnableModule
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_EnableModule
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_POSIF_Enable
</UL>

<P><STRONG><a name="[155]"></a>XMC_SCU_CLOCK_EnableHighPerformanceOscillator</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, xmc4_scu.o(i.XMC_SCU_CLOCK_EnableHighPerformanceOscillator))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XMC_SCU_CLOCK_EnableHighPerformanceOscillator
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCHP_GetFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[158]"></a>XMC_SCU_CLOCK_EnableLowPowerOscillator</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, xmc4_scu.o(i.XMC_SCU_CLOCK_EnableLowPowerOscillator))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[162]"></a>XMC_SCU_CLOCK_EnableSystemPll</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, xmc4_scu.o(i.XMC_SCU_CLOCK_EnableSystemPll))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[13e]"></a>XMC_SCU_CLOCK_GetPeripheralClockFrequency</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(i.XMC_SCU_CLOCK_GetPeripheralClockFrequency))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CAN_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DAC_CH_SetFrequency
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_SetBaudrate
</UL>

<P><STRONG><a name="[ea]"></a>XMC_SCU_CLOCK_Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, xmc4_scu.o(i.XMC_SCU_CLOCK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = XMC_SCU_CLOCK_Init &rArr; XMC_SCU_CLOCK_StartSystemPll &rArr; XMC_SCU_CLOCK_StepSystemPllFrequency &rArr; XMC_SCU_lDelay &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_HIB_SetStandbyClockSource
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_StartSystemPll
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetSystemClockSource
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetSystemClockDivider
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetPeripheralClockDivider
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetCpuClockDivider
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetCcuClockDivider
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetBackupClockCalibrationMode
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_IsLowPowerOscillatorStable
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_EnableSystemPll
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_EnableLowPowerOscillator
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_EnableHighPerformanceOscillator
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_DisableSystemPll
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_HIB_EnableHibernateDomain
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Config_Init
</UL>

<P><STRONG><a name="[160]"></a>XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, xmc4_scu.o(i.XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[159]"></a>XMC_SCU_CLOCK_IsLowPowerOscillatorStable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, xmc4_scu.o(i.XMC_SCU_CLOCK_IsLowPowerOscillatorStable))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[152]"></a>XMC_SCU_CLOCK_IsPeripheralClockGated</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, xmc4_scu.o(i.XMC_SCU_CLOCK_IsPeripheralClockGated))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XMC_SCU_CLOCK_IsPeripheralClockGated
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DMA_IsEnabled
</UL>

<P><STRONG><a name="[15b]"></a>XMC_SCU_CLOCK_SetBackupClockCalibrationMode</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, xmc4_scu.o(i.XMC_SCU_CLOCK_SetBackupClockCalibrationMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = XMC_SCU_CLOCK_SetBackupClockCalibrationMode &rArr; XMC_SCU_lDelay &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_lDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[15e]"></a>XMC_SCU_CLOCK_SetCcuClockDivider</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(i.XMC_SCU_CLOCK_SetCcuClockDivider))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[15d]"></a>XMC_SCU_CLOCK_SetCpuClockDivider</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(i.XMC_SCU_CLOCK_SetCpuClockDivider))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[15f]"></a>XMC_SCU_CLOCK_SetPeripheralClockDivider</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(i.XMC_SCU_CLOCK_SetPeripheralClockDivider))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[15c]"></a>XMC_SCU_CLOCK_SetSystemClockDivider</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(i.XMC_SCU_CLOCK_SetSystemClockDivider))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[156]"></a>XMC_SCU_CLOCK_SetSystemClockSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xmc4_scu.o(i.XMC_SCU_CLOCK_SetSystemClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[165]"></a>XMC_SCU_CLOCK_SetSystemPllClockSource</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, xmc4_scu.o(i.XMC_SCU_CLOCK_SetSystemPllClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_StartSystemPll
</UL>

<P><STRONG><a name="[163]"></a>XMC_SCU_CLOCK_StartSystemPll</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, xmc4_scu.o(i.XMC_SCU_CLOCK_StartSystemPll))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = XMC_SCU_CLOCK_StartSystemPll &rArr; XMC_SCU_CLOCK_StepSystemPllFrequency &rArr; XMC_SCU_lDelay &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCHP_GetFrequency
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_StepSystemPllFrequency
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetSystemPllClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[ec]"></a>XMC_SCU_CLOCK_StartUsbPll</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, xmc4_scu.o(i.XMC_SCU_CLOCK_StartUsbPll))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Config_Init
</UL>

<P><STRONG><a name="[166]"></a>XMC_SCU_CLOCK_StepSystemPllFrequency</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, xmc4_scu.o(i.XMC_SCU_CLOCK_StepSystemPllFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = XMC_SCU_CLOCK_StepSystemPllFrequency &rArr; XMC_SCU_lDelay &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_lDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_StartSystemPll
</UL>

<P><STRONG><a name="[13c]"></a>XMC_SCU_CLOCK_UngatePeripheralClock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, xmc4_scu.o(i.XMC_SCU_CLOCK_UngatePeripheralClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XMC_SCU_CLOCK_UngatePeripheralClock
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DAC_Enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU8_EnableModule
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_EnableModule
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CAN_Enable
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_POSIF_Enable
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_ERU_Enable
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DMA_Enable
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GLOBAL_EnableModule
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_Enable
</UL>

<P><STRONG><a name="[157]"></a>XMC_SCU_HIB_EnableHibernateDomain</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, xmc4_scu.o(i.XMC_SCU_HIB_EnableHibernateDomain))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[eb]"></a>XMC_SCU_HIB_SetRtcClockSource</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, xmc4_scu.o(i.XMC_SCU_HIB_SetRtcClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Config_Init
</UL>

<P><STRONG><a name="[15a]"></a>XMC_SCU_HIB_SetStandbyClockSource</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, xmc4_scu.o(i.XMC_SCU_HIB_SetStandbyClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[13d]"></a>XMC_SCU_RESET_DeassertPeripheralReset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, xmc4_scu.o(i.XMC_SCU_RESET_DeassertPeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DAC_Enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU8_EnableModule
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_EnableModule
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CAN_Enable
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_POSIF_Enable
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_ERU_Enable
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DMA_Enable
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GLOBAL_EnableModule
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_Enable
</UL>

<P><STRONG><a name="[151]"></a>XMC_SCU_RESET_IsPeripheralResetAsserted</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, xmc4_scu.o(i.XMC_SCU_RESET_IsPeripheralResetAsserted))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XMC_SCU_RESET_IsPeripheralResetAsserted
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DMA_IsEnabled
</UL>

<P><STRONG><a name="[275]"></a>XMC_SPI_CH_DisableEvent</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, xmc_spi.o(i.XMC_SPI_CH_DisableEvent))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_dma_rx_handler
</UL>

<P><STRONG><a name="[167]"></a>XMC_SPI_CH_DisableSlaveSelect</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, xmc_spi.o(i.XMC_SPI_CH_DisableSlaveSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XMC_SPI_CH_DisableSlaveSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_ClearStatusFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashCsnDisable
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Disable_slave
</UL>

<P><STRONG><a name="[193]"></a>XMC_SPI_CH_EnableEvent</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, xmc_spi.o(i.XMC_SPI_CH_EnableEvent))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashTransmit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashReceive
</UL>

<P><STRONG><a name="[185]"></a>XMC_SPI_CH_EnableSlaveSelect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xmc_spi.o(i.XMC_SPI_CH_EnableSlaveSelect))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashInit
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashCsnEnable
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Slave_Select
</UL>

<P><STRONG><a name="[f9]"></a>XMC_SPI_CH_GetReceivedData</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, xmc_spi.o(i.XMC_SPI_CH_GetReceivedData))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MASTER_lStdRBUFFlush
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MASTER_lReceivePolling
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashTransmit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashReceive
</UL>

<P><STRONG><a name="[ed]"></a>XMC_SPI_CH_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, xmc_spi.o(i.XMC_SPI_CH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = XMC_SPI_CH_Init &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_SetBaudrate
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Spi_Master_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashInit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MASTER_0_lInit
</UL>

<P><STRONG><a name="[12b]"></a>XMC_UART_CH_GetReceivedData</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, xmc_uart.o(i.XMC_UART_CH_GetReceivedData))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC1_4_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC0_1_IRQHandler
</UL>

<P><STRONG><a name="[16b]"></a>XMC_UART_CH_Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, xmc_uart.o(i.XMC_UART_CH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = XMC_UART_CH_Init &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_SetBaudrate
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_UartInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Rs485Init
</UL>

<P><STRONG><a name="[12a]"></a>XMC_UART_CH_Transmit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, xmc_uart.o(i.XMC_UART_CH_Transmit))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tra_com
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC0_0_IRQHandler
</UL>

<P><STRONG><a name="[169]"></a>XMC_USIC_CH_Enable</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, xmc_usic.o(i.XMC_USIC_CH_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XMC_USIC_CH_Enable &rArr; XMC_USIC_Enable &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_Init
</UL>

<P><STRONG><a name="[f1]"></a>XMC_USIC_CH_RXFIFO_Configure</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, xmc_usic.o(i.XMC_USIC_CH_RXFIFO_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XMC_USIC_CH_RXFIFO_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Spi_Master_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MASTER_0_lInit
</UL>

<P><STRONG><a name="[f2]"></a>XMC_USIC_CH_RXFIFO_SetInterruptNodePointer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, xmc_usic.o(i.XMC_USIC_CH_RXFIFO_SetInterruptNodePointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XMC_USIC_CH_RXFIFO_SetInterruptNodePointer
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Spi_Master_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MASTER_0_lInit
</UL>

<P><STRONG><a name="[16a]"></a>XMC_USIC_CH_SetBaudrate</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, xmc_usic.o(i.XMC_USIC_CH_SetBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetPeripheralClockFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_Init
</UL>

<P><STRONG><a name="[ee]"></a>XMC_USIC_CH_SetInterruptNodePointer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, xmc_usic.o(i.XMC_USIC_CH_SetInterruptNodePointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XMC_USIC_CH_SetInterruptNodePointer
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_UartInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Spi_Master_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Rs485Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MASTER_0_lInit
</UL>

<P><STRONG><a name="[ef]"></a>XMC_USIC_CH_TXFIFO_Configure</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, xmc_usic.o(i.XMC_USIC_CH_TXFIFO_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XMC_USIC_CH_TXFIFO_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Spi_Master_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MASTER_0_lInit
</UL>

<P><STRONG><a name="[f0]"></a>XMC_USIC_CH_TXFIFO_SetInterruptNodePointer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, xmc_usic.o(i.XMC_USIC_CH_TXFIFO_SetInterruptNodePointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XMC_USIC_CH_TXFIFO_SetInterruptNodePointer
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Spi_Master_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MASTER_0_lInit
</UL>

<P><STRONG><a name="[16c]"></a>XMC_USIC_Enable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, xmc_usic.o(i.XMC_USIC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XMC_USIC_Enable &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_RESET_DeassertPeripheralReset
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_UngatePeripheralClock
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_Enable
</UL>

<P><STRONG><a name="[16d]"></a>XMC_VADC_GLOBAL_EnableModule</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, xmc_vadc.o(i.XMC_VADC_GLOBAL_EnableModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XMC_VADC_GLOBAL_EnableModule &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_RESET_DeassertPeripheralReset
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_UngatePeripheralClock
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GLOBAL_Init
</UL>

<P><STRONG><a name="[132]"></a>XMC_VADC_GLOBAL_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, xmc_vadc.o(i.XMC_VADC_GLOBAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XMC_VADC_GLOBAL_Init &rArr; XMC_VADC_GLOBAL_EnableModule &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GLOBAL_EnableModule
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC_Config_Init
</UL>

<P><STRONG><a name="[139]"></a>XMC_VADC_GLOBAL_StartupCalibration</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, xmc_vadc.o(i.XMC_VADC_GLOBAL_StartupCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC_Config_Init
</UL>

<P><STRONG><a name="[135]"></a>XMC_VADC_GROUP_ChannelInit</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, xmc_vadc.o(i.XMC_VADC_GROUP_ChannelInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = XMC_VADC_GROUP_ChannelInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC_Config_Init
</UL>

<P><STRONG><a name="[133]"></a>XMC_VADC_GROUP_Init</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, xmc_vadc.o(i.XMC_VADC_GROUP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = XMC_VADC_GROUP_Init &rArr; XMC_VADC_GROUP_InputClassInit
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_InputClassInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC_Config_Init
</UL>

<P><STRONG><a name="[16e]"></a>XMC_VADC_GROUP_InputClassInit</STRONG> (Thumb, 110 bytes, Stack size 44 bytes, xmc_vadc.o(i.XMC_VADC_GROUP_InputClassInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = XMC_VADC_GROUP_InputClassInit
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_Init
</UL>

<P><STRONG><a name="[134]"></a>XMC_VADC_GROUP_QueueInit</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, xmc_vadc.o(i.XMC_VADC_GROUP_QueueInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XMC_VADC_GROUP_QueueInit
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_QueueDisableArbitrationSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC_Config_Init
</UL>

<P><STRONG><a name="[137]"></a>XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc_vadc.o(i.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC_Config_Init
</UL>

<P><STRONG><a name="[138]"></a>XMC_VADC_GROUP_SetPowerMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc_vadc.o(i.XMC_VADC_GROUP_SetPowerMode))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC_Config_Init
</UL>

<P><STRONG><a name="[73]"></a>Z_Int_Hook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, debug.o(i.Z_Int_Hook))
<BR>[Address Reference Count : 1]<UL><LI> debug.o(i.debug_mode_init)
</UL>
<P><STRONG><a name="[10d]"></a>__hardfp_floorf</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, floorf.o(i.__hardfp_floorf))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stp_StaMach
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepLoop_Update_close
</UL>

<P><STRONG><a name="[d4]"></a>add_one_action</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, action.o(i.add_one_action))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = add_one_action &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_com
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PBP_Line
</UL>

<P><STRONG><a name="[121]"></a>app_Can_Init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_can.o(i.app_Can_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = app_Can_Init &rArr; CAN_NODE_Init &rArr; GLOBAL_CAN_Init &rArr; XMC_CAN_Init &rArr; XMC_CAN_Enable &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_NODE_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[128]"></a>app_DacInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_dac.o(i.app_DacInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = app_DacInit &rArr; bsp_DacInit &rArr; XMC_DAC_CH_StartDataMode &rArr; XMC_DAC_CH_SetFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DacSetValue
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DacInit
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[172]"></a>app_DacSetValue</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_dac.o(i.app_DacSetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_DacSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DacSetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tension_value
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
</UL>

<P><STRONG><a name="[12d]"></a>app_DacSetValue_da0</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_dac.o(i.app_DacSetValue_da0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_DacSetValue_da0
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DacSetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Us100_Int_Hook
</UL>

<P><STRONG><a name="[173]"></a>app_SpiFlashRead</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, app_spiflash.o(i.app_SpiFlashRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = app_SpiFlashRead &rArr; bsp_SpiFlashReadBuffer &rArr; bsp_SpiFlashTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_par
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nopmove_refresh_para
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_refresh_para
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_para_from_eeprom
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_para45_from_eeprom
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_para_group
</UL>

<P><STRONG><a name="[175]"></a>app_spiFlash_WritePara</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, app_spiflash.o(i.app_spiFlash_WritePara))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = app_spiFlash_WritePara &rArr; bsp_SpiFlashWriteBuffer &rArr; bsp_SpiFlashAutoWritePage &rArr; bsp_SpiFlashPageWrite &rArr; bsp_SpiFlashWaitForWriteEnd &rArr; bsp_SpiFlashTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashWriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para_group
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_par
</UL>

<P><STRONG><a name="[177]"></a>at_solenoid</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, action.o(i.at_solenoid))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = at_solenoid &rArr; set_tension_value &rArr; io_set_logic_output &rArr; io_set_physical_output &rArr; dsp1_output_control &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tension_value
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conprocess_data
</UL>

<P><STRONG><a name="[249]"></a>back_startpoint</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, action.o(i.back_startpoint))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol
</UL>

<P><STRONG><a name="[170]"></a>bsp_DacInit</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bsp_dac.o(i.bsp_DacInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsp_DacInit &rArr; XMC_DAC_CH_StartDataMode &rArr; XMC_DAC_CH_SetFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DAC_CH_StartDataMode
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DAC_CH_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_DacInit
</UL>

<P><STRONG><a name="[171]"></a>bsp_DacSetValue</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_dac.o(i.bsp_DacSetValue))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_DacSetValue_da0
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_DacSetValue
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_DacInit
</UL>

<P><STRONG><a name="[122]"></a>bsp_DelayInit</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, bsp_delay.o(i.bsp_DelayInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bsp_DelayInit &rArr; XMC_CCU4_Init &rArr; XMC_CCU4_EnableModule &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SetModuleClock
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_SetTimerCountingMode
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_SetInterruptNode
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_CompareInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[179]"></a>bsp_DelayMs</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, bsp_delay.o(i.bsp_DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_SetTimerValue
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_GetEvent
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_ClearEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[17d]"></a>bsp_DelayUs</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, bsp_delay.o(i.bsp_DelayUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_DelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_SetTimerValue
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_GetEvent
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_ClearEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[17e]"></a>bsp_Disable_slave</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_spibus.o(i.bsp_Disable_slave))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_Disable_slave &rArr; XMC_SPI_CH_DisableSlaveSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_DisableSlaveSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp_command
</UL>

<P><STRONG><a name="[17f]"></a>bsp_GpioWatchInit</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, bsp_watch.o(i.bsp_GpioWatchInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bsp_GpioWatchInit &rArr; XMC_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Watch_Init
</UL>

<P><STRONG><a name="[180]"></a>bsp_Mster_WR</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bsp_spibus.o(i.bsp_Mster_WR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bsp_Mster_WR &rArr; SPI_MASTER_Transfer &rArr; SPI_MASTER_lReceivePolling &rArr; SPI_MASTER_lStdRBUFFlush
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MASTER_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_wirte_lowlevel
</UL>

<P><STRONG><a name="[124]"></a>bsp_Rs485Init</STRONG> (Thumb, 270 bytes, Stack size 64 bytes, bsp_rs485.o(i.bsp_Rs485Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bsp_Rs485Init &rArr; XMC_UART_CH_Init &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_SetInterruptNodePointer
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_EnableEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[184]"></a>bsp_Slave_Select</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bsp_spibus.o(i.bsp_Slave_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_Slave_Select
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_EnableSlaveSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp_command
</UL>

<P><STRONG><a name="[18f]"></a>bsp_SpiFlashCsnDisable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_spiflash.o(i.bsp_SpiFlashCsnDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_SpiFlashCsnDisable &rArr; XMC_SPI_CH_DisableSlaveSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_DisableSlaveSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashReadBuffer
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashPageWrite
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashEraseSector
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashWaitForWriteEnd
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashCmpData
</UL>

<P><STRONG><a name="[18c]"></a>bsp_SpiFlashCsnEnable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_spiflash.o(i.bsp_SpiFlashCsnEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_SpiFlashCsnEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_EnableSlaveSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashReadBuffer
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashPageWrite
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashEraseSector
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashWaitForWriteEnd
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashCmpData
</UL>

<P><STRONG><a name="[189]"></a>bsp_SpiFlashEraseSector</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bsp_spiflash.o(i.bsp_SpiFlashEraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsp_SpiFlashEraseSector &rArr; bsp_SpiFlashWaitForWriteEnd &rArr; bsp_SpiFlashTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashTransmit
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashCsnEnable
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashCsnDisable
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashWaitForWriteEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashAutoWritePage
</UL>

<P><STRONG><a name="[126]"></a>bsp_SpiFlashInit</STRONG> (Thumb, 634 bytes, Stack size 160 bytes, bsp_spiflash.o(i.bsp_SpiFlashInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = bsp_SpiFlashInit &rArr; XMC_SPI_CH_Init &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DMA_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DMA_CH_SetEventHandler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DMA_CH_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DMA_CH_EnableEvent
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_EnableSlaveSelect
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_SetInterruptNodePointer
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[18a]"></a>bsp_SpiFlashPageWrite</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, bsp_spiflash.o(i.bsp_SpiFlashPageWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsp_SpiFlashPageWrite &rArr; bsp_SpiFlashWaitForWriteEnd &rArr; bsp_SpiFlashTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashTransmit
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashCsnEnable
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashCsnDisable
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashWaitForWriteEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashAutoWritePage
</UL>

<P><STRONG><a name="[174]"></a>bsp_SpiFlashReadBuffer</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, bsp_spiflash.o(i.bsp_SpiFlashReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsp_SpiFlashReadBuffer &rArr; bsp_SpiFlashTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashTransmit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashReceive
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashCsnEnable
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashCsnDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_SpiFlashRead
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashAutoWritePage
</UL>

<P><STRONG><a name="[18e]"></a>bsp_SpiFlashReceive</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, bsp_spiflash.o(i.bsp_SpiFlashReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsp_SpiFlashReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_GetReceivedData
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_EnableEvent
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_SetTransmitMode
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DMA_CH_SetSourceAddress
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DMA_CH_SetDestinationAddress
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DMA_CH_SetBlockSize
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DMA_CH_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashReadBuffer
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashWaitForWriteEnd
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashCmpData
</UL>

<P><STRONG><a name="[18d]"></a>bsp_SpiFlashTransmit</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, bsp_spiflash.o(i.bsp_SpiFlashTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsp_SpiFlashTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_GetReceivedData
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_EnableEvent
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_SetTransmitMode
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DMA_CH_SetSourceAddress
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DMA_CH_SetDestinationAddress
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DMA_CH_SetBlockSize
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DMA_CH_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashReadBuffer
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashPageWrite
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashEraseSector
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashWaitForWriteEnd
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashCmpData
</UL>

<P><STRONG><a name="[176]"></a>bsp_SpiFlashWriteBuffer</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, bsp_spiflash.o(i.bsp_SpiFlashWriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bsp_SpiFlashWriteBuffer &rArr; bsp_SpiFlashAutoWritePage &rArr; bsp_SpiFlashPageWrite &rArr; bsp_SpiFlashWaitForWriteEnd &rArr; bsp_SpiFlashTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashAutoWritePage
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spiFlash_WritePara
</UL>

<P><STRONG><a name="[125]"></a>bsp_Spi_Master_Init</STRONG> (Thumb, 476 bytes, Stack size 152 bytes, bsp_spibus.o(i.bsp_Spi_Master_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = bsp_Spi_Master_Init &rArr; XMC_SPI_CH_Init &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_TXFIFO_SetInterruptNodePointer
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_TXFIFO_Configure
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_RXFIFO_SetInterruptNodePointer
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_RXFIFO_Configure
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_SetInterruptNodePointer
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[129]"></a>bsp_UartInit</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, bsp_uart.o(i.bsp_UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bsp_UartInit &rArr; XMC_UART_CH_Init &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_EnableEvent
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_SetInterruptNodePointer
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[123]"></a>bsp_Watch_Init</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, bsp_watch.o(i.bsp_Watch_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsp_Watch_Init &rArr; XMC_CCU4_Init &rArr; XMC_CCU4_EnableModule &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SetModuleClock
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_SetTimerCountingMode
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_SetInterruptNode
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_CompareInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_Init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GpioWatchInit
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[22e]"></a>cal_pid_p_stopn</STRONG> (Thumb, 240 bytes, Stack size 20 bytes, mc_pmsm.o(i.cal_pid_p_stopn))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cal_pid_p_stopn
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor1_control
</UL>

<P><STRONG><a name="[25e]"></a>calculate_angle</STRONG> (Thumb, 600 bytes, Stack size 20 bytes, action.o(i.calculate_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = calculate_angle
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zpl_process
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;special_sewing
</UL>

<P><STRONG><a name="[1cb]"></a>calculate_continue_move_time</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, action.o(i.calculate_continue_move_time))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_next
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_back
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;course_back
</UL>

<P><STRONG><a name="[1a1]"></a>check_data</STRONG> (Thumb, 2704 bytes, Stack size 96 bytes, action.o(i.check_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = check_data &rArr; ChangeY
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1Control
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeY
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeX
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zpl_process
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;special_sewing
</UL>

<P><STRONG><a name="[255]"></a>check_foot_status</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, action.o(i.check_foot_status))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_start
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_next
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_end
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_back
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_12
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_10
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_09
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_07
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_06
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_04
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_03
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_01
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_12
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_10
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_09
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_07
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_06
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_04
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_03
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_01
</UL>

<P><STRONG><a name="[1f3]"></a>check_sewing_range</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, action.o(i.check_sewing_range))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_move_func
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_12
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_10
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_09
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_07
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_06
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_04
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_03
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_01
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_12
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_10
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_09
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_07
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_06
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_04
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_03
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_01
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_beginpoint
</UL>

<P><STRONG><a name="[228]"></a>checki03_status</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, system.o(i.checki03_status))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a4]"></a>checki04_status</STRONG> (Thumb, 1342 bytes, Stack size 16 bytes, system.o(i.checki04_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = checki04_status &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_com
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1_Run_State
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1Control
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sewing_stop
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_up
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_down
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_zx
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;footer_both_down
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPmsm1Angle_Adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ac]"></a>checki05_status</STRONG> (Thumb, 458 bytes, Stack size 8 bytes, system.o(i.checki05_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = checki05_status &rArr; foot_up &rArr; inpress_up &rArr; inpress_to &rArr; zx_quickmove &rArr; stepper_motor_move &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tension_value
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_logic_output
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_up
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_down
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foot_up
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foot_down
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b0]"></a>checki06_status</STRONG> (Thumb, 548 bytes, Stack size 8 bytes, system.o(i.checki06_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = checki06_status &rArr; go_origin_allmotor &rArr; find_dead_center &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_logic_output
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_get_logic_inout
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_go_origin
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_motor_move
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_origin_state
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_check_motion_done
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_func
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_xy
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_allmotor
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;footer_both_up
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;footer_both_down
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[229]"></a>checki07_status</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, system.o(i.checki07_status))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ba]"></a>checki08_status</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, system.o(i.checki08_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = checki08_status &rArr; go_origin_zx &rArr; stepper_go_origin_multiple &rArr; get_origin_state &rArr; stepper_get_z_status &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_up
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_down
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_zx
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foot_down
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bb]"></a>checki10_status</STRONG> (Thumb, 608 bytes, Stack size 8 bytes, system.o(i.checki10_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = checki10_status &rArr; find_dead_center &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_zx
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;needle_down
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_up
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_to
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_down
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_zx
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_dead_center
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_position
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22a]"></a>checki11_status</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, system.o(i.checki11_status))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ff]"></a>clarke_calc</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, app_svpwm.o(i.clarke_calc))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVPWM_t_calc
</UL>

<P><STRONG><a name="[246]"></a>com_error</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, communication.o(i.com_error))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol
</UL>

<P><STRONG><a name="[1c1]"></a>config_mainmotor</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, initial.o(i.config_mainmotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = config_mainmotor &rArr; Pmsm1Initial &rArr; VADC_Config_Init &rArr; XMC_VADC_GROUP_Init &rArr; XMC_VADC_GROUP_InputClassInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mPmsm1ParaActive
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor1ParamBind
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor1CurveBind
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1PowerOnWatch
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1ParaAddSend
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1Initial
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_mainmotor
</UL>

<P><STRONG><a name="[1c6]"></a>conprocess_data</STRONG> (Thumb, 856 bytes, Stack size 16 bytes, action.o(i.conprocess_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = conprocess_data &rArr; at_solenoid &rArr; set_tension_value &rArr; io_set_logic_output &rArr; io_set_physical_output &rArr; dsp1_output_control &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_pat_point_sub_one
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_solenoid
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeY
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeX
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;special_sewing
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_continue_back
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_back
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;course_back
</UL>

<P><STRONG><a name="[1c8]"></a>coor_com_fun</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, action.o(i.coor_com_fun))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = coor_com_fun &rArr; go_commandpoint &rArr; y_quickmove &rArr; stepper_motor_move &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_commandpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_status
</UL>

<P><STRONG><a name="[1ca]"></a>course_back</STRONG> (Thumb, 624 bytes, Stack size 24 bytes, action.o(i.course_back))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = course_back &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_y
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_x
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_making_pen_signal
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_up
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_to
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_down
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conprocess_data
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_continue_move_time
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setout_status
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_startpoint
</UL>

<P><STRONG><a name="[1d0]"></a>cpy_para_buff</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, parameter.o(i.cpy_para_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = cpy_para_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_stepmotor_curve
</UL>

<P><STRONG><a name="[27c]"></a>crc_calcu1</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, step_motor_drv.o(i.crc_calcu1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc_calcu1
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_stepmotor_curve
</UL>

<P><STRONG><a name="[1d3]"></a>debug_mode_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, debug.o(i.debug_mode_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = debug_mode_init &rArr; Install_MC_Int_Fun
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Install_MC_Int_Fun
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a9]"></a>delay_ms</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = delay_ms &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMs
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_com
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wind_status
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version_check
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slack_status
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setout_status
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prewind_status
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preedit_status
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_mainmotor
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_status
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_status
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_multipul_program_status
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_drv_status
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki10_status
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki08_status
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki06_status
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki05_status
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki04_status
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_go_origin
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_running
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_stepmotor_curve
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_stepmotor_config_para
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_stepmotor_up_drv
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_stepmotor_end_drv
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_multipule_program_data
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multipule_program_end
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multipule_program_beginning
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_to_begin
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_pause
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zoom_in_one_stitch
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trim_action
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_sewing
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_move_xy
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_move_func
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_12
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_10
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_09
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_07
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_06
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_04
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_03
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_01
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_nop_move_pause
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_making_pen_signal
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_stop
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_next
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_back
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_running_for_dead_center
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_up
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_down
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_startpoint
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_setoutpoint
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_xy
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_allmotor
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_commandpoint
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_beginpoint
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;footer_both_up
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;footer_both_down
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foot_up
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foot_half_down
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foot_down
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_dead_center
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_process
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;course_back
</UL>

<P><STRONG><a name="[1d5]"></a>delay_process</STRONG> (Thumb, 374 bytes, Stack size 8 bytes, action.o(i.delay_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = delay_process &rArr; delay_ms &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_func
</UL>

<P><STRONG><a name="[1cd]"></a>delay_us</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = delay_us &rArr; bsp_DelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_motor_move
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_stepmotor_curve
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp_command
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_stepmotor_config_para
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_go_origin_multiple
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_zx
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_y
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_x
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zoom_in_one_stitch
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;special_sewing
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_move_xy
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_10
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_07
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_04
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_01
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_10
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_07
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_04
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_01
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_continue_next
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_continue_back
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_process
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;course_back
</UL>

<P><STRONG><a name="[1bc]"></a>detect_position</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, action.o(i.detect_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = detect_position &rArr; GetPmsm1Angle_Adjust
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPmsm1Angle_Adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slack_status
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prewind_status
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preedit_status
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki10_status
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_running
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_move_xy
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_move_func
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_allmotor
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_beginpoint
</UL>

<P><STRONG><a name="[242]"></a>do_pat_point_add_one</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, action.o(i.do_pat_point_add_one))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;special_sewing
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data
</UL>

<P><STRONG><a name="[1c7]"></a>do_pat_point_sub_one</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, action.o(i.do_pat_point_sub_one))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slack_status
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preedit_status
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_running
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;special_sewing
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_next
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_move_func
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_continue_next
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_startpoint
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_setoutpoint
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_beginpoint
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conprocess_data
</UL>

<P><STRONG><a name="[1d6]"></a>download_drv_status</STRONG> (Thumb, 412 bytes, Stack size 16 bytes, system.o(i.download_drv_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = download_drv_status &rArr; send_stepmotor_up_drv &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_com
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_stepmotor_up_drv
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_stepmotor_end_drv
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_stepmotor_up_drv
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_to_begin
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1db]"></a>download_multipul_program_status</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, system.o(i.download_multipul_program_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = download_multipul_program_status &rArr; send_multipule_program_data &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_com
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_multipule_program_data
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_multipule_program_status
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multipule_program_end
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multipule_program_beginning
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22b]"></a>download_status</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system.o(i.download_status))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e0]"></a>dsp1_output_control</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, io_function.o(i.dsp1_output_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = dsp1_output_control &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp_command
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_toggle_physical_output
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_physical_output
</UL>

<P><STRONG><a name="[1e3]"></a>emergency</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, action.o(i.emergency))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_status
</UL>

<P><STRONG><a name="[1e2]"></a>error_status</STRONG> (Thumb, 776 bytes, Stack size 8 bytes, system.o(i.error_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = error_status &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tension_value
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_com
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_logic_output
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_get_logic_inout
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1_Run_State
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sewing_stop
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergency
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bd]"></a>find_dead_center</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, action.o(i.find_dead_center))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = find_dead_center &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_com
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1_Run_State
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1Control
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPmsm1SpeedRef
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mainmotor_stop_angle
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPmsm1Angle_Adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slack_status
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prewind_status
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preedit_status
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_mainmotor
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki10_status
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_running
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trim_action
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_move_xy
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_move_func
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_allmotor
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_beginpoint
</UL>

<P><STRONG><a name="[1e6]"></a>finish_status</STRONG> (Thumb, 660 bytes, Stack size 8 bytes, system.o(i.finish_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = finish_status &rArr; go_origin_allmotor &rArr; find_dead_center &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tension_value
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_logic_output
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_par
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_allmotor
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;footer_both_up
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foot_up
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foot_half_up
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coor_com_fun
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ae]"></a>foot_down</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, action.o(i.foot_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = foot_down &rArr; inpress_down &rArr;  foot_down (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_logic_output
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_down
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki08_status
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki05_status
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_down
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_allmotor
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;footer_procedure
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;footer_both_down
</UL>

<P><STRONG><a name="[1e9]"></a>foot_half_down</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, action.o(i.foot_half_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = foot_half_down &rArr; io_set_logic_output &rArr; io_set_physical_output &rArr; dsp1_output_control &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_logic_output
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;footer_procedure
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;footer_both_down
</UL>

<P><STRONG><a name="[1e8]"></a>foot_half_up</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, action.o(i.foot_half_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = foot_half_up &rArr; io_set_logic_output &rArr; io_set_physical_output &rArr; dsp1_output_control &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_logic_output
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setout_status
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_status
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;footer_procedure
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;footer_both_up
</UL>

<P><STRONG><a name="[1af]"></a>foot_up</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, action.o(i.foot_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = foot_up &rArr; inpress_up &rArr; inpress_to &rArr; zx_quickmove &rArr; stepper_motor_move &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_logic_output
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_up
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setout_status
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_status
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki05_status
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_allmotor
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;footer_procedure
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;footer_both_up
</UL>

<P><STRONG><a name="[1a5]"></a>footer_both_down</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, action.o(i.footer_both_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = footer_both_down &rArr; foot_down &rArr; inpress_down &rArr;  foot_down (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foot_half_down
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foot_down
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slack_status
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setout_status
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preedit_status
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki06_status
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki04_status
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_running
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_allmotor
</UL>

<P><STRONG><a name="[1b8]"></a>footer_both_up</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, action.o(i.footer_both_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = footer_both_up &rArr; foot_up &rArr; inpress_up &rArr; inpress_to &rArr; zx_quickmove &rArr; stepper_motor_move &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foot_up
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foot_half_up
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setout_status
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preedit_status
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_status
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki06_status
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_running
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_stop
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_allmotor
</UL>

<P><STRONG><a name="[1ea]"></a>footer_procedure</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, action.o(i.footer_procedure))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = footer_procedure &rArr; foot_up &rArr; inpress_up &rArr; inpress_to &rArr; zx_quickmove &rArr; stepper_motor_move &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foot_up
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foot_half_up
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foot_half_down
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foot_down
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prewind_status
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preedit_status
</UL>

<P><STRONG><a name="[9e]"></a>function_1ms_hook</STRONG> (Thumb, 1854 bytes, Stack size 8 bytes, main.o(i.function_1ms_hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = function_1ms_hook &rArr; set_tension_value &rArr; io_set_logic_output &rArr; io_set_physical_output &rArr; dsp1_output_control &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yj_follow_udctos
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tension_value
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_logic_output
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_get_logic_inout
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1RunningWatch
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU43_2_IRQHandler
</UL>

<P><STRONG><a name="[1ed]"></a>g_SpiMode_CmdTip</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, app_spi.o(i.g_SpiMode_CmdTip))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_quick
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_move
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackData_version
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_fifo_recISR
</UL>

<P><STRONG><a name="[1b5]"></a>get_origin_state</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stepper_function.o(i.get_origin_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = get_origin_state &rArr; stepper_get_z_status &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_get_logic_inout
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_get_z_status
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slack_status
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki06_status
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_go_origin
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_go_origin_multiple
</UL>

<P><STRONG><a name="[1f1]"></a>go_beginpoint</STRONG> (Thumb, 1270 bytes, Stack size 80 bytes, action.o(i.go_beginpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = go_beginpoint &rArr; find_dead_center &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_com
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_logic_output
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;y_quickmove
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_quickmove
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_pause
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_check_motion_done
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nopmove_calculate_move_time
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_up
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_dead_center
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_pat_point_sub_one
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_position
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sewing_range
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_running
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_startpoint
</UL>

<P><STRONG><a name="[1c9]"></a>go_commandpoint</STRONG> (Thumb, 364 bytes, Stack size 56 bytes, action.o(i.go_commandpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = go_commandpoint &rArr; y_quickmove &rArr; stepper_motor_move &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;y_quickmove
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_quickmove
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_check_motion_done
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nopmove_calculate_move_time
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_y
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_x
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slack_status
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preedit_status
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_making_pen_signal
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_xy
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_allmotor
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coor_com_fun
</UL>

<P><STRONG><a name="[1b6]"></a>go_origin_allmotor</STRONG> (Thumb, 478 bytes, Stack size 8 bytes, action.o(i.go_origin_allmotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = go_origin_allmotor &rArr; find_dead_center &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stretch_foot_in
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;laser_timer_stop
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_up
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_zx
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_xy
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_commandpoint
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;footer_both_up
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;footer_both_down
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foot_up
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foot_down
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_dead_center
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_position
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slack_status
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setout_status
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preedit_status
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_status
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki06_status
</UL>

<P><STRONG><a name="[1fa]"></a>go_origin_x</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, action.o(i.go_origin_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = go_origin_x &rArr; stepper_go_origin_multiple &rArr; get_origin_state &rArr; stepper_get_z_status &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_go_origin_multiple
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_xy
</UL>

<P><STRONG><a name="[1b7]"></a>go_origin_xy</STRONG> (Thumb, 518 bytes, Stack size 8 bytes, action.o(i.go_origin_xy))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = go_origin_xy &rArr; go_origin_y &rArr; stepper_go_origin_multiple &rArr; get_origin_state &rArr; stepper_get_z_status &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_y
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_xy_both
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_x
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_commandpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki06_status
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_startpoint
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_allmotor
</UL>

<P><STRONG><a name="[1fc]"></a>go_origin_xy_both</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, action.o(i.go_origin_xy_both))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = go_origin_xy_both &rArr; stepper_go_origin_multiple &rArr; get_origin_state &rArr; stepper_get_z_status &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_go_origin_multiple
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_xy
</UL>

<P><STRONG><a name="[1fd]"></a>go_origin_y</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, action.o(i.go_origin_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = go_origin_y &rArr; stepper_go_origin_multiple &rArr; get_origin_state &rArr; stepper_get_z_status &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_go_origin_multiple
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_xy
</UL>

<P><STRONG><a name="[1aa]"></a>go_origin_zx</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, action.o(i.go_origin_zx))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = go_origin_zx &rArr; stepper_go_origin_multiple &rArr; get_origin_state &rArr; stepper_get_z_status &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_go_origin_multiple
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_up
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slack_status
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki10_status
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki08_status
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki04_status
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_allmotor
</UL>

<P><STRONG><a name="[1fe]"></a>go_setoutpoint</STRONG> (Thumb, 698 bytes, Stack size 40 bytes, action.o(i.go_setoutpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = go_setoutpoint &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_com
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;y_quickmove
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_quickmove
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_check_motion_done
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nopmove_calculate_move_time
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_y
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_x
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_toggle_logic_output
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stretch_foot_out
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stretch_foot_in
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_up
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_pat_point_sub_one
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setout_status
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_running
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_startpoint
</UL>

<P><STRONG><a name="[201]"></a>go_startpoint</STRONG> (Thumb, 292 bytes, Stack size 8 bytes, action.o(i.go_startpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = go_startpoint &rArr; go_beginpoint &rArr; find_dead_center &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_beginpoint
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_pat_point_sub_one
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setout_status
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_running
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_startpoint
</UL>

<P><STRONG><a name="[22d]"></a>holding_axes</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, mc_pmsm.o(i.holding_axes))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor1_control
</UL>

<P><STRONG><a name="[204]"></a>init_comm</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, communication.o(i.init_comm))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial
</UL>

<P><STRONG><a name="[203]"></a>init_var</STRONG> (Thumb, 4118 bytes, Stack size 0 bytes, initial.o(i.init_var))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial
</UL>

<P><STRONG><a name="[202]"></a>initial</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, initial.o(i.initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = initial &rArr; stepper_refresh_mc_para &rArr; write_para_group &rArr; app_spiFlash_WritePara &rArr; bsp_SpiFlashWriteBuffer &rArr; bsp_SpiFlashAutoWritePage &rArr; bsp_SpiFlashPageWrite &rArr; bsp_SpiFlashWaitForWriteEnd &rArr; bsp_SpiFlashTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_refresh_mc_para
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_para_from_eeprom
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_para45_from_eeprom
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nopmove_init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_var
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[209]"></a>initial_mainmotor</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, action.o(i.initial_mainmotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = initial_mainmotor &rArr; find_dead_center &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_com
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_mainmotor
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1TaskCheck
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1FindZero
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_dead_center
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ab]"></a>inpress_down</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, action.o(i.inpress_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = inpress_down &rArr;  foot_down (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_logic_output
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_to
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foot_down
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prewind_status
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preedit_status
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki10_status
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki08_status
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki05_status
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki04_status
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_running
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_move_func
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foot_down
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;course_back
</UL>

<P><STRONG><a name="[1be]"></a>inpress_to</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, action.o(i.inpress_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = inpress_to &rArr; zx_quickmove &rArr; stepper_motor_move &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zx_quickmove
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_zx
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preedit_status
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki10_status
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trim_action
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_next
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_continue_next
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_continue_back
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_back
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_up
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_down
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;course_back
</UL>

<P><STRONG><a name="[1a8]"></a>inpress_up</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, action.o(i.inpress_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = inpress_up &rArr; inpress_to &rArr; zx_quickmove &rArr; stepper_motor_move &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_logic_output
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_to
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wind_status
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slack_status
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prewind_status
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preedit_status
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki10_status
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki08_status
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki05_status
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki04_status
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_running
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zoom_in_one_stitch
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_sewing
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_move_func
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_nop_move_pause
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_stop
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_setoutpoint
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_zx
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_allmotor
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_beginpoint
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foot_up
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;course_back
</UL>

<P><STRONG><a name="[20c]"></a>io_function_init</STRONG> (Thumb, 2022 bytes, Stack size 16 bytes, io_function.o(i.io_function_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = io_function_init &rArr; io_sc0723_bsp_init &rArr; XMC_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_sc0723_bsp_init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_sc0720a_bsp_init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_sc0720_bsp_init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_sc0719_bsp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b1]"></a>io_get_logic_inout</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, io_function.o(i.io_get_logic_inout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = io_get_logic_inout &rArr; io_get_physical_output
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_translate_logic_to_physical
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_get_physical_output
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_get_physical_input
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wind_status
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slack_status
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_status
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki06_status
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;function_1ms_hook
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_origin_state
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zpl_process
</UL>

<P><STRONG><a name="[213]"></a>io_get_physical_input</STRONG> (Thumb, 462 bytes, Stack size 16 bytes, io_function.o(i.io_get_physical_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = io_get_physical_input
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_GetInput
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_get_logic_inout
</UL>

<P><STRONG><a name="[212]"></a>io_get_physical_output</STRONG> (Thumb, 462 bytes, Stack size 16 bytes, io_function.o(i.io_get_physical_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = io_get_physical_output
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_GetOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_get_logic_inout
</UL>

<P><STRONG><a name="[1ad]"></a>io_set_logic_output</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, io_function.o(i.io_set_logic_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = io_set_logic_output &rArr; io_set_physical_output &rArr; dsp1_output_control &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_translate_logic_to_physical
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_physical_output
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slack_status
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setout_status
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tension_value
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prewind_status
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_status
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_status
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki06_status
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki05_status
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;function_1ms_hook
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zoom_in_one_stitch
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trim_action
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stretch_foot_out
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stretch_foot_in
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;special_sewing
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_move_func
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_making_pen_signal
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_stop
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_up
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_down
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_beginpoint
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foot_up
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foot_half_up
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foot_half_down
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foot_down
</UL>

<P><STRONG><a name="[216]"></a>io_set_physical_output</STRONG> (Thumb, 596 bytes, Stack size 16 bytes, io_function.o(i.io_set_physical_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = io_set_physical_output &rArr; dsp1_output_control &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_SetOutputLevel
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp1_output_control
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_logic_output
</UL>

<P><STRONG><a name="[1ff]"></a>io_toggle_logic_output</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, io_function.o(i.io_toggle_logic_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = io_toggle_logic_output &rArr; io_toggle_physical_output &rArr; dsp1_output_control &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_translate_logic_to_physical
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_toggle_physical_output
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_next
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_back
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_setoutpoint
</UL>

<P><STRONG><a name="[218]"></a>io_toggle_physical_output</STRONG> (Thumb, 512 bytes, Stack size 8 bytes, io_function.o(i.io_toggle_physical_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = io_toggle_physical_output &rArr; dsp1_output_control &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_ToggleOutput
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp1_output_control
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_toggle_logic_output
</UL>

<P><STRONG><a name="[211]"></a>io_translate_logic_to_physical</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, io_function.o(i.io_translate_logic_to_physical))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_logic_output
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_get_logic_inout
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_toggle_logic_output
</UL>

<P><STRONG><a name="[101]"></a>ipark_calc</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, app_svpwm.o(i.ipark_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipark_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVPWM_t_calc
</UL>

<P><STRONG><a name="[1d7]"></a>jump_to_begin</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, step_motor_drv.o(i.jump_to_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = jump_to_begin &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp_command
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_drv_status
</UL>

<P><STRONG><a name="[21a]"></a>keep_running_for_dead_center</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, action.o(i.keep_running_for_dead_center))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = keep_running_for_dead_center &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_com
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1_Run_State
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1Control
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPmsm1SpeedRef
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mainmotor_stop_angle
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
</UL>

<P><STRONG><a name="[262]"></a>laser_timer_start</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, action.o(i.laser_timer_start))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
</UL>

<P><STRONG><a name="[1f8]"></a>laser_timer_stop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, action.o(i.laser_timer_stop))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_making_pen_signal
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_allmotor
</UL>

<P><STRONG><a name="[1c5]"></a>mPmsm1ParaActive</STRONG> (Thumb, 206 bytes, Stack size 0 bytes, mc_pmsm.o(i.mPmsm1ParaActive))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_mainmotor
</UL>

<P><STRONG><a name="[23e]"></a>m_start</STRONG> (Thumb, 1082 bytes, Stack size 0 bytes, mc_pmsm.o(i.m_start))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmsm1_100us_task
</UL>

<P><STRONG><a name="[80]"></a>main</STRONG> (Thumb, 600 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = main &rArr; run_status &rArr; go_beginpoint &rArr; find_dead_center &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wind_status
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version_check
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_motor_sync_angle
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slack_status
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setout_status
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_com
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_par
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prewind_status
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preedit_status
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poweroff_status
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_logic_output
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_get_logic_inout
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_function_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_mainmotor
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_status
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_status
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_status
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_multipul_program_status
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_drv_status
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_mode_init
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki11_status
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki10_status
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki08_status
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki07_status
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki06_status
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki05_status
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki04_status
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki03_status
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPmsm1Version
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[9a]"></a>motor1_control</STRONG> (Thumb, 1450 bytes, Stack size 4 bytes, mc_pmsm.o(i.motor1_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = motor1_control &rArr; cal_pid_p_stopn
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;holding_axes
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_pid_p_stopn
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU40_2_IRQHandler
</UL>

<P><STRONG><a name="[22f]"></a>move_back</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, action.o(i.move_back))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = move_back &rArr; single_move_xy &rArr; find_dead_center &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_move_xy
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_continue_move_time
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_move_func
</UL>

<P><STRONG><a name="[231]"></a>move_continue_back</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, action.o(i.move_continue_back))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = move_continue_back &rArr; movestep_y &rArr; stepper_motor_move_sync &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_y
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_x
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_move_func
</UL>

<P><STRONG><a name="[232]"></a>move_continue_next</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, action.o(i.move_continue_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = move_continue_next &rArr; movestep_y &rArr; stepper_motor_move_sync &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_y
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_x
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_move_func
</UL>

<P><STRONG><a name="[233]"></a>move_next</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, action.o(i.move_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = move_next &rArr; single_move_xy &rArr; find_dead_center &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_move_xy
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_continue_move_time
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_move_func
</UL>

<P><STRONG><a name="[234]"></a>move_startpoint</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, action.o(i.move_startpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = move_startpoint &rArr; go_startpoint &rArr; go_beginpoint &rArr; find_dead_center &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_startpoint
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_setoutpoint
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_xy
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;course_back
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_move_func
</UL>

<P><STRONG><a name="[235]"></a>move_xy</STRONG> (Thumb, 722 bytes, Stack size 8 bytes, action.o(i.move_xy))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = move_xy &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_com
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_y
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_x
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPmsm1Angle_Adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
</UL>

<P><STRONG><a name="[1cc]"></a>movestep_x</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, step_motor_drv.o(i.movestep_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = movestep_x &rArr; stepper_motor_move_sync &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_motor_move_sync
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_motor_move
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zoom_in_one_stitch
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;special_sewing
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_move_xy
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_10
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_09
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_07
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_04
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_03
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_01
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_10
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_09
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_07
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_04
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_03
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_01
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_xy
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_continue_next
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_continue_back
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_setoutpoint
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_commandpoint
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;course_back
</UL>

<P><STRONG><a name="[1ce]"></a>movestep_y</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, step_motor_drv.o(i.movestep_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = movestep_y &rArr; stepper_motor_move_sync &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_motor_move_sync
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_motor_move
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zoom_in_one_stitch
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;special_sewing
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_move_xy
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_12
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_10
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_07
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_06
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_04
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_01
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_12
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_10
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_07
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_06
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_04
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_01
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_xy
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_continue_next
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_continue_back
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_setoutpoint
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_commandpoint
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;course_back
</UL>

<P><STRONG><a name="[1c0]"></a>movestep_zx</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, step_motor_drv.o(i.movestep_zx))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = movestep_zx &rArr; stepper_motor_move &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_motor_move
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki10_status
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trim_action
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;special_sewing
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_to
</UL>

<P><STRONG><a name="[1dc]"></a>multipule_program_beginning</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, step_motor_drv.o(i.multipule_program_beginning))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = multipule_program_beginning &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp_command
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_multipul_program_status
</UL>

<P><STRONG><a name="[1df]"></a>multipule_program_end</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, step_motor_drv.o(i.multipule_program_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = multipule_program_end &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp_command
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_multipul_program_status
</UL>

<P><STRONG><a name="[1d2]"></a>mymemcpy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, parameter.o(i.mymemcpy))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nopmove_refresh_para
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_motor_cfg
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_refresh_para
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpy_para_buff
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_refresh_mc_para
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_para_from_eeprom
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_para45_from_eeprom
</UL>

<P><STRONG><a name="[1d1]"></a>mymemset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, parameter.o(i.mymemset))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpy_para_buff
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nopmove_init
</UL>

<P><STRONG><a name="[1bf]"></a>needle_down</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, action.o(i.needle_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = needle_down &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_com
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1_Run_State
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1Control
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPmsm1SpeedRef
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mainmotor_stop_angle
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preedit_status
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki10_status
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_running
</UL>

<P><STRONG><a name="[1f4]"></a>nopmove_calculate_move_time</STRONG> (Thumb, 436 bytes, Stack size 48 bytes, nopmove_speed.o(i.nopmove_calculate_move_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = nopmove_calculate_move_time &rArr; _nopmove_get_length
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nopmove_get_speed
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nopmove_get_length
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_nop_move_pause
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_setoutpoint
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_commandpoint
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_beginpoint
</UL>

<P><STRONG><a name="[208]"></a>nopmove_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, nopmove_speed.o(i.nopmove_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = nopmove_init &rArr; nopmove_refresh_para &rArr; app_SpiFlashRead &rArr; bsp_SpiFlashReadBuffer &rArr; bsp_SpiFlashTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nopmove_refresh_para
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nopmove_sort_speed_point
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slack_status
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial
</UL>

<P><STRONG><a name="[100]"></a>park_calc</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, app_svpwm.o(i.park_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = park_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVPWM_t_calc
</UL>

<P><STRONG><a name="[23b]"></a>pause_stop</STRONG> (Thumb, 416 bytes, Stack size 8 bytes, action.o(i.pause_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = pause_stop &rArr; trim_action &rArr; find_dead_center &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_com
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_logic_output
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1_Run_State
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1Control
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trim_action
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sewing_stop
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_up
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;footer_both_up
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPmsm1Angle_Adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
</UL>

<P><STRONG><a name="[131]"></a>pmsm1_100us_task</STRONG> (Thumb, 1868 bytes, Stack size 48 bytes, mc_pmsm.o(i.pmsm1_100us_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pmsm1_100us_task &rArr; Svpwm_Update &rArr; SVPWM_t_calc &rArr; park_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1FindZero
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Pwm
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_start
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_SetOutputLow
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_GetInput
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Svpwm_Update
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Pwm
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G0_0_IRQHandler
</UL>

<P><STRONG><a name="[224]"></a>poweroff_status</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system.o(i.poweroff_status))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23f]"></a>pre_running</STRONG> (Thumb, 780 bytes, Stack size 8 bytes, system.o(i.pre_running))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = pre_running &rArr; go_startpoint &rArr; go_beginpoint &rArr; find_dead_center &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_nop_move_pause
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;needle_down
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_up
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_down
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_startpoint
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_setoutpoint
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_beginpoint
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;footer_both_up
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;footer_both_down
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_dead_center
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_pat_point_sub_one
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_position
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
</UL>

<P><STRONG><a name="[226]"></a>preedit_status</STRONG> (Thumb, 1424 bytes, Stack size 24 bytes, system.o(i.preedit_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = preedit_status &rArr; single_move_func &rArr; move_startpoint &rArr; go_startpoint &rArr; go_beginpoint &rArr; find_dead_center &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_move_func
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_func
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;needle_down
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_up
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_to
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_down
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_allmotor
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_commandpoint
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;footer_procedure
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;footer_both_up
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;footer_both_down
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_dead_center
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_pat_point_sub_one
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_position
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPmsm1Angle_Adjust
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeY
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeX
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[222]"></a>prewind_status</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, system.o(i.prewind_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = prewind_status &rArr; find_dead_center &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_com
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_logic_output
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1_Run_State
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1Control
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_up
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_down
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;footer_procedure
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_dead_center
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_position
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPmsm1Angle_Adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f2]"></a>process_data</STRONG> (Thumb, 812 bytes, Stack size 16 bytes, action.o(i.process_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = process_data &rArr; at_solenoid &rArr; set_tension_value &rArr; io_set_logic_output &rArr; io_set_physical_output &rArr; dsp1_output_control &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_pat_point_add_one
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_solenoid
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeY
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeX
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slack_status
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preedit_status
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_running
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zpl_process
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;special_sewing
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_next
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_continue_next
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_startpoint
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_setoutpoint
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_beginpoint
</UL>

<P><STRONG><a name="[1cf]"></a>process_making_pen_signal</STRONG> (Thumb, 790 bytes, Stack size 16 bytes, action.o(i.process_making_pen_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_com
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_logic_output
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;laser_timer_stop
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_commandpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_next
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_move_func
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_continue_next
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_continue_back
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;course_back
</UL>

<P><STRONG><a name="[240]"></a>process_nop_move_pause</STRONG> (Thumb, 670 bytes, Stack size 80 bytes, action.o(i.process_nop_move_pause))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = process_nop_move_pause &rArr; inpress_up &rArr; inpress_to &rArr; zx_quickmove &rArr; stepper_motor_move &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;y_quickmove
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_quickmove
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_pause
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_check_motion_done
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nopmove_calculate_move_time
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_up
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slack_status
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_running
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_move_func
</UL>

<P><STRONG><a name="[243]"></a>protocol</STRONG> (Thumb, 14182 bytes, Stack size 40 bytes, communication.o(i.protocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_get_logic_inout
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_stepmotor_config_para
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_para_group
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_origin_state
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_code
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tra_com
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_error
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPmsm1SpeedRef
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPmsm1Angle
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_stop
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_start
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_next
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_end
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_back
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mainmotor_stop_angle
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_startpoint
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPmsm1Angle_Adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_com
</UL>

<P><STRONG><a name="[1de]"></a>read_multipule_program_status</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, step_motor_drv.o(i.read_multipule_program_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = read_multipule_program_status &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp_command
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_multipul_program_status
</UL>

<P><STRONG><a name="[21b]"></a>read_par</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, parameter.o(i.read_par))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = read_par &rArr; app_SpiFlashRead &rArr; bsp_SpiFlashReadBuffer &rArr; bsp_SpiFlashTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_SpiFlashRead
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24d]"></a>read_para_group</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, parameter.o(i.read_para_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = read_para_group &rArr; app_SpiFlashRead &rArr; bsp_SpiFlashReadBuffer &rArr; bsp_SpiFlashTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_SpiFlashRead
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_refresh_mc_para
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol
</UL>

<P><STRONG><a name="[24e]"></a>read_stepmotor_config_para</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, step_motor_drv.o(i.read_stepmotor_config_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = read_stepmotor_config_para &rArr; send_dsp2_command &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp2_command
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp1_command
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol
</UL>

<P><STRONG><a name="[251]"></a>read_stepmotor_curve_crc</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, step_motor_drv.o(i.read_stepmotor_curve_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = read_stepmotor_curve_crc &rArr; send_dsp4_command &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp4_command
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp3_command
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp2_command
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp1_command
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_stepmotor_curve
</UL>

<P><STRONG><a name="[1d9]"></a>read_stepmotor_up_drv</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, step_motor_drv.o(i.read_stepmotor_up_drv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = read_stepmotor_up_drv &rArr; send_dsp4_command &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp4_command
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp3_command
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp2_command
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp1_command
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_drv_status
</UL>

<P><STRONG><a name="[220]"></a>ready_status</STRONG> (Thumb, 4296 bytes, Stack size 24 bytes, system.o(i.ready_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = ready_status &rArr; single_move_func &rArr; move_startpoint &rArr; go_startpoint &rArr; go_beginpoint &rArr; find_dead_center &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_DacSetValue_da0
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_DacSetValue
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tension_value
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_com
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_logic_output
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_get_logic_inout
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_go_origin
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp1_output_control
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_running
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_motor_move
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_par
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_origin_state
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_go_origin_multiple
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_check_motion_done
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nopmove_calculate_move_time
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1_Run_State
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1Control
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPmsm1SpeedRef
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trim_action
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_move_func
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_func
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mainmotor_stop_angle
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_nop_move_pause
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;needle_down
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_running_for_dead_center
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_up
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_down
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_setoutpoint
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_zx
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_allmotor
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_commandpoint
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;footer_procedure
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;footer_both_up
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;footer_both_down
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foot_up
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foot_half_up
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foot_half_down
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foot_down
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_dead_center
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_position
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPmsm1Angle_Adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[105]"></a>rec_com</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, communication.o(i.rec_com))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wind_status
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prewind_status
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_mainmotor
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_status
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_multipul_program_status
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_drv_status
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki04_status
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_stepmotor_up_drv
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_multipule_program_data
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zoom_in_one_stitch
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trim_action
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_sewing
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;special_sewing
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_making_pen_signal
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_stop
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;needle_down
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_xy
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_running_for_dead_center
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_setoutpoint
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_beginpoint
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_dead_center
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_one_action
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SewingReverse
</UL>

<P><STRONG><a name="[254]"></a>remove_01</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, action.o(i.remove_01))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = remove_01 &rArr; movestep_y &rArr; stepper_motor_move_sync &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_y
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_x
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_stop
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sewing_range
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_foot_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_func
</UL>

<P><STRONG><a name="[257]"></a>remove_03</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, action.o(i.remove_03))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = remove_03 &rArr; movestep_x &rArr; stepper_motor_move_sync &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_x
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_stop
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sewing_range
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_foot_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_func
</UL>

<P><STRONG><a name="[258]"></a>remove_04</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, action.o(i.remove_04))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = remove_04 &rArr; movestep_y &rArr; stepper_motor_move_sync &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_y
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_x
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_stop
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sewing_range
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_foot_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_func
</UL>

<P><STRONG><a name="[259]"></a>remove_06</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, action.o(i.remove_06))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = remove_06 &rArr; movestep_y &rArr; stepper_motor_move_sync &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_y
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_stop
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sewing_range
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_foot_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_func
</UL>

<P><STRONG><a name="[25a]"></a>remove_07</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, action.o(i.remove_07))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = remove_07 &rArr; movestep_y &rArr; stepper_motor_move_sync &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_y
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_x
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_stop
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sewing_range
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_foot_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_func
</UL>

<P><STRONG><a name="[25b]"></a>remove_09</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, action.o(i.remove_09))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = remove_09 &rArr; movestep_x &rArr; stepper_motor_move_sync &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_x
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_stop
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sewing_range
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_foot_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_func
</UL>

<P><STRONG><a name="[25c]"></a>remove_10</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, action.o(i.remove_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = remove_10 &rArr; movestep_y &rArr; stepper_motor_move_sync &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_y
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_x
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_stop
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sewing_range
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_foot_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_func
</UL>

<P><STRONG><a name="[25d]"></a>remove_12</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, action.o(i.remove_12))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = remove_12 &rArr; movestep_y &rArr; stepper_motor_move_sync &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_y
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_stop
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sewing_range
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_foot_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_func
</UL>

<P><STRONG><a name="[256]"></a>remove_stop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, action.o(i.remove_stop))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_func
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_12
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_10
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_09
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_07
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_06
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_04
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_03
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_01
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_12
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_10
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_09
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_07
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_06
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_04
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_03
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_01
</UL>

<P><STRONG><a name="[206]"></a>restore_para45_from_eeprom</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, parameter.o(i.restore_para45_from_eeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = restore_para45_from_eeprom &rArr; app_SpiFlashRead &rArr; bsp_SpiFlashReadBuffer &rArr; bsp_SpiFlashTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_SpiFlashRead
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slack_status
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial
</UL>

<P><STRONG><a name="[205]"></a>restore_para_from_eeprom</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, parameter.o(i.restore_para_from_eeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = restore_para_from_eeprom &rArr; app_SpiFlashRead &rArr; bsp_SpiFlashReadBuffer &rArr; bsp_SpiFlashTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_SpiFlashRead
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slack_status
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial
</UL>

<P><STRONG><a name="[221]"></a>run_status</STRONG> (Thumb, 5646 bytes, Stack size 72 bytes, system.o(i.run_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = run_status &rArr; go_beginpoint &rArr; find_dead_center &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tension_value
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_com
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_logic_output
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_zx
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_y
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_x
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1_Run_State
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1Control
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zpl_process
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zoom_in_one_stitch
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trim_action
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_sewing
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sewing_stop
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mainmotor_stop_angle
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_making_pen_signal
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_stop
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;needle_down
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_xy
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;laser_timer_stop
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;laser_timer_start
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_up
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_to
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_down
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_beginpoint
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;footer_both_up
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;footer_both_down
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_dead_center
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_pat_point_sub_one
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_pat_point_add_one
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_data
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_angle
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_solenoid
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SewingReverse
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PBP_Line
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPmsm1Angle_Adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24f]"></a>send_dsp1_command</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, step_motor_drv.o(i.send_dsp1_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = send_dsp1_command &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp_command
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version_check
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_stepmotor_config_para
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_stepmotor_up_drv
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_stepmotor_curve_crc
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_stepmotor_config_para
</UL>

<P><STRONG><a name="[250]"></a>send_dsp2_command</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, step_motor_drv.o(i.send_dsp2_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = send_dsp2_command &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp_command
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version_check
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_stepmotor_config_para
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_stepmotor_up_drv
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_stepmotor_curve_crc
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_stepmotor_config_para
</UL>

<P><STRONG><a name="[252]"></a>send_dsp3_command</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, step_motor_drv.o(i.send_dsp3_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = send_dsp3_command &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp_command
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_stepmotor_up_drv
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_stepmotor_curve_crc
</UL>

<P><STRONG><a name="[253]"></a>send_dsp4_command</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, step_motor_drv.o(i.send_dsp4_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = send_dsp4_command &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp_command
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_stepmotor_up_drv
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_stepmotor_curve_crc
</UL>

<P><STRONG><a name="[1e1]"></a>send_dsp_command</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, step_motor_drv.o(i.send_dsp_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Slave_Select
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Disable_slave
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_check_error
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_wirte_lowlevel
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_motor_sync_angle
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_init
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_get_z_status
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_setup_motor
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp1_output_control
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_motor_move_sync
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_motor_move
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_stepmotor_curve
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_stepmotor_config_para
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_stepmotor_up_drv
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_stepmotor_end_drv
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_multipule_program_data
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp4_command
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp3_command
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp2_command
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp1_command
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_multipule_program_status
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multipule_program_end
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multipule_program_beginning
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_to_begin
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_pause
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_check_motion_done
</UL>

<P><STRONG><a name="[1dd]"></a>send_multipule_program_data</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, step_motor_drv.o(i.send_multipule_program_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = send_multipule_program_data &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_com
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp_command
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_multipul_program_status
</UL>

<P><STRONG><a name="[1da]"></a>send_stepmotor_end_drv</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, step_motor_drv.o(i.send_stepmotor_end_drv))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = send_stepmotor_end_drv &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp_command
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_drv_status
</UL>

<P><STRONG><a name="[1d8]"></a>send_stepmotor_up_drv</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, step_motor_drv.o(i.send_stepmotor_up_drv))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = send_stepmotor_up_drv &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_com
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp_command
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_drv_status
</UL>

<P><STRONG><a name="[1e5]"></a>set_mainmotor_stop_angle</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, action.o(i.set_mainmotor_stop_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_mainmotor_stop_angle
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1Control
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sewing_stop
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;needle_down
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_running_for_dead_center
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_dead_center
</UL>

<P><STRONG><a name="[178]"></a>set_tension_value</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, action.o(i.set_tension_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = set_tension_value &rArr; io_set_logic_output &rArr; io_set_physical_output &rArr; dsp1_output_control &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_DacSetValue
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_logic_output
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setout_status
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_status
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_status
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki05_status
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;function_1ms_hook
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trim_action
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_solenoid
</UL>

<P><STRONG><a name="[225]"></a>setout_status</STRONG> (Thumb, 928 bytes, Stack size 8 bytes, system.o(i.setout_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = setout_status &rArr; go_startpoint &rArr; go_beginpoint &rArr; find_dead_center &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tension_value
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_logic_output
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_startpoint
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_setoutpoint
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_allmotor
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;footer_both_up
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;footer_both_down
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foot_up
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foot_half_up
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;course_back
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a6]"></a>sewing_stop</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, action.o(i.sewing_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sewing_stop &rArr; set_mainmotor_stop_angle
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mainmotor_stop_angle
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wind_status
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_status
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki04_status
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zoom_in_one_stitch
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trim_action
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_sewing
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_stop
</UL>

<P><STRONG><a name="[265]"></a>shift_01</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, action.o(i.shift_01))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = shift_01 &rArr; movestep_y &rArr; stepper_motor_move_sync &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_y
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_x
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_stop
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sewing_range
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_foot_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_func
</UL>

<P><STRONG><a name="[266]"></a>shift_03</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, action.o(i.shift_03))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = shift_03 &rArr; movestep_x &rArr; stepper_motor_move_sync &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_x
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_stop
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sewing_range
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_foot_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_func
</UL>

<P><STRONG><a name="[267]"></a>shift_04</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, action.o(i.shift_04))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = shift_04 &rArr; movestep_y &rArr; stepper_motor_move_sync &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_y
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_x
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_stop
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sewing_range
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_foot_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_func
</UL>

<P><STRONG><a name="[268]"></a>shift_06</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, action.o(i.shift_06))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = shift_06 &rArr; movestep_y &rArr; stepper_motor_move_sync &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_y
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_stop
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sewing_range
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_foot_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_func
</UL>

<P><STRONG><a name="[269]"></a>shift_07</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, action.o(i.shift_07))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = shift_07 &rArr; movestep_y &rArr; stepper_motor_move_sync &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_y
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_x
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_stop
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sewing_range
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_foot_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_func
</UL>

<P><STRONG><a name="[26a]"></a>shift_09</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, action.o(i.shift_09))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = shift_09 &rArr; movestep_x &rArr; stepper_motor_move_sync &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_x
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_stop
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sewing_range
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_foot_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_func
</UL>

<P><STRONG><a name="[26b]"></a>shift_10</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, action.o(i.shift_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = shift_10 &rArr; movestep_y &rArr; stepper_motor_move_sync &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_y
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_x
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_stop
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sewing_range
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_foot_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_func
</UL>

<P><STRONG><a name="[26c]"></a>shift_12</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, action.o(i.shift_12))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = shift_12 &rArr; movestep_y &rArr; stepper_motor_move_sync &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_y
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_stop
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sewing_range
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_foot_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_func
</UL>

<P><STRONG><a name="[1b9]"></a>shift_func</STRONG> (Thumb, 330 bytes, Stack size 8 bytes, action.o(i.shift_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = shift_func &rArr; shift_12 &rArr; movestep_y &rArr; stepper_motor_move_sync &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_12
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_10
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_09
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_07
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_06
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_04
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_03
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_01
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_stop
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_12
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_10
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_09
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_07
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_06
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_04
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_03
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_01
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_process
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preedit_status
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki06_status
</UL>

<P><STRONG><a name="[248]"></a>single_back</STRONG> (Thumb, 388 bytes, Stack size 16 bytes, action.o(i.single_back))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = single_back &rArr; conprocess_data &rArr; at_solenoid &rArr; set_tension_value &rArr; io_set_logic_output &rArr; io_set_physical_output &rArr; dsp1_output_control &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_toggle_logic_output
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stretch_foot_out
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stretch_foot_in
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_to
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conprocess_data
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_foot_status
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol
</UL>

<P><STRONG><a name="[26d]"></a>single_continue_back</STRONG> (Thumb, 332 bytes, Stack size 8 bytes, action.o(i.single_continue_back))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = single_continue_back &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_making_pen_signal
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_to
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conprocess_data
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_move_func
</UL>

<P><STRONG><a name="[26e]"></a>single_continue_next</STRONG> (Thumb, 482 bytes, Stack size 8 bytes, action.o(i.single_continue_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = single_continue_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_making_pen_signal
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_to
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_pat_point_sub_one
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_move_func
</UL>

<P><STRONG><a name="[24a]"></a>single_end</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, action.o(i.single_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = single_end
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_foot_status
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol
</UL>

<P><STRONG><a name="[241]"></a>single_move_func</STRONG> (Thumb, 1366 bytes, Stack size 16 bytes, action.o(i.single_move_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = single_move_func &rArr; move_startpoint &rArr; go_startpoint &rArr; go_beginpoint &rArr; find_dead_center &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_logic_output
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_continue_next
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_continue_back
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_nop_move_pause
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_making_pen_signal
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_startpoint
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_next
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_continue_next
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_continue_back
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_back
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_up
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_down
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_dead_center
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_pat_point_sub_one
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_position
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sewing_range
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPmsm1Angle_Adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preedit_status
</UL>

<P><STRONG><a name="[230]"></a>single_move_xy</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, action.o(i.single_move_xy))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = single_move_xy &rArr; find_dead_center &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_y
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_x
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_dead_center
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_position
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_next
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_back
</UL>

<P><STRONG><a name="[247]"></a>single_next</STRONG> (Thumb, 318 bytes, Stack size 8 bytes, action.o(i.single_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_toggle_logic_output
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stretch_foot_out
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stretch_foot_in
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_making_pen_signal
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_to
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_pat_point_sub_one
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_foot_status
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol
</UL>

<P><STRONG><a name="[24b]"></a>single_start</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, action.o(i.single_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = single_start
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_foot_status
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol
</UL>

<P><STRONG><a name="[24c]"></a>single_stop</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, action.o(i.single_stop))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol
</UL>

<P><STRONG><a name="[227]"></a>slack_status</STRONG> (Thumb, 1328 bytes, Stack size 24 bytes, system.o(i.slack_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = slack_status &rArr; go_origin_allmotor &rArr; find_dead_center &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_logic_output
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_get_logic_inout
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_refresh_para
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_go_origin
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_motor_move
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_stepmotor_curve
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_stepmotor_config_para
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para_group
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_par
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_para_from_eeprom
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_para45_from_eeprom
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nopmove_init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_origin_state
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_check_motion_done
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_nop_move_pause
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_up
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_zx
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_allmotor
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_commandpoint
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;footer_both_down
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_dead_center
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_pat_point_sub_one
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_position
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>special_sewing</STRONG> (Thumb, 798 bytes, Stack size 56 bytes, action.o(i.special_sewing))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = special_sewing &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_com
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_logic_output
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_zx
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_y
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_x
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1Control
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_pat_point_sub_one
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_pat_point_add_one
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conprocess_data
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_data
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_angle
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPmsm1Angle_Adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_sewing
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SewingReverse
</UL>

<P><STRONG><a name="[108]"></a>spi_fifo_recISR</STRONG> (Thumb, 4132 bytes, Stack size 24 bytes, app_spi.o(i.spi_fifo_recISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_pattern
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_SpiMode_CmdTip
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_GetInput
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOut
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimulateSpiCmd
</UL>

<P><STRONG><a name="[70]"></a>spi_flash_dma_rx_handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_spiflash.o(i.spi_flash_dma_rx_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_flash_dma_rx_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_DisableEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_spiflash.o(i.bsp_SpiFlashInit)
</UL>
<P><STRONG><a name="[6f]"></a>spi_flash_dma_tx_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_spiflash.o(i.spi_flash_dma_tx_handler))
<BR>[Address Reference Count : 1]<UL><LI> bsp_spiflash.o(i.bsp_SpiFlashInit)
</UL>
<P><STRONG><a name="[263]"></a>spi_read_wirte_lowlevel</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, step_motor_drv.o(i.spi_read_wirte_lowlevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Mster_WR
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimulateSpiCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp_command
</UL>

<P><STRONG><a name="[264]"></a>stepper_check_error</STRONG> (Thumb, 702 bytes, Stack size 16 bytes, stepper_function.o(i.stepper_check_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stepper_check_error
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_physical_num_and_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp_command
</UL>

<P><STRONG><a name="[1b3]"></a>stepper_check_motion_done</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stepper_function.o(i.stepper_check_motion_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = stepper_check_motion_done &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_physical_num_and_channel
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp_command
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slack_status
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki06_status
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_go_origin
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_pause
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_go_origin_multiple
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_nop_move_pause
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_setoutpoint
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_commandpoint
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_beginpoint
</UL>

<P><STRONG><a name="[1f0]"></a>stepper_get_z_status</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, stepper_function.o(i.stepper_get_z_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = stepper_get_z_status &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_physical_num_and_channel
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp_command
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_origin_state
</UL>

<P><STRONG><a name="[1b4]"></a>stepper_go_origin</STRONG> (Thumb, 446 bytes, Stack size 32 bytes, stepper_function.o(i.stepper_go_origin))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = stepper_go_origin &rArr; get_origin_state &rArr; stepper_get_z_status &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_motor_move
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_origin_state
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_check_motion_done
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slack_status
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki06_status
</UL>

<P><STRONG><a name="[1fb]"></a>stepper_go_origin_multiple</STRONG> (Thumb, 2338 bytes, Stack size 128 bytes, stepper_function.o(i.stepper_go_origin_multiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = stepper_go_origin_multiple &rArr; get_origin_state &rArr; stepper_get_z_status &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_motor_move
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_origin_state
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_check_motion_done
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_zx
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_y
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_xy_both
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_x
</UL>

<P><STRONG><a name="[21d]"></a>stepper_init</STRONG> (Thumb, 564 bytes, Stack size 8 bytes, stepper_function.o(i.stepper_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = stepper_init &rArr; stepper_setup_motor &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_setup_motor
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_motor_handler_sturct
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_physical_port_used_or_not
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_motor_cfg_para
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_refresh_para
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp_command
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b2]"></a>stepper_motor_move</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, stepper_function.o(i.stepper_motor_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = stepper_motor_move &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_physical_num_and_channel
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp_command
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slack_status
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checki06_status
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_go_origin
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zx_quickmove
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;y_quickmove
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_quickmove
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_go_origin_multiple
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_zx
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_y
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_x
</UL>

<P><STRONG><a name="[236]"></a>stepper_motor_move_sync</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, stepper_function.o(i.stepper_motor_move_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = stepper_motor_move_sync &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_physical_num_and_channel
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp_command
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_y
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_x
</UL>

<P><STRONG><a name="[21e]"></a>stepper_motor_sync_angle</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, stepper_function.o(i.stepper_motor_sync_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = stepper_motor_sync_angle &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_physical_num_and_channel
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp_command
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f7]"></a>stepper_pause</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, stepper_function.o(i.stepper_pause))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = stepper_pause &rArr; stepper_check_motion_done &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_physical_num_and_channel
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp_command
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_check_motion_done
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_nop_move_pause
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_beginpoint
</UL>

<P><STRONG><a name="[207]"></a>stepper_refresh_mc_para</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stepper_function.o(i.stepper_refresh_mc_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = stepper_refresh_mc_para &rArr; write_para_group &rArr; app_spiFlash_WritePara &rArr; bsp_SpiFlashWriteBuffer &rArr; bsp_SpiFlashAutoWritePage &rArr; bsp_SpiFlashPageWrite &rArr; bsp_SpiFlashWaitForWriteEnd &rArr; bsp_SpiFlashTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para_group
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemcpy
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_para_group
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial
</UL>

<P><STRONG><a name="[272]"></a>stepper_refresh_para</STRONG> (Thumb, 228 bytes, Stack size 112 bytes, stepper_function.o(i.stepper_refresh_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = stepper_refresh_para &rArr; app_SpiFlashRead &rArr; bsp_SpiFlashReadBuffer &rArr; bsp_SpiFlashTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_SpiFlashRead
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_motor_cfg
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slack_status
</UL>

<P><STRONG><a name="[1f9]"></a>stretch_foot_in</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, action.o(i.stretch_foot_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = stretch_foot_in &rArr; io_set_logic_output &rArr; io_set_physical_output &rArr; dsp1_output_control &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_logic_output
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_next
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_back
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_setoutpoint
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_origin_allmotor
</UL>

<P><STRONG><a name="[200]"></a>stretch_foot_out</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, action.o(i.stretch_foot_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = stretch_foot_out &rArr; io_set_logic_output &rArr; io_set_physical_output &rArr; dsp1_output_control &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_logic_output
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_next
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_back
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_setoutpoint
</UL>

<P><STRONG><a name="[261]"></a>tail_sewing</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, action.o(i.tail_sewing))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = tail_sewing &rArr; special_sewing &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_com
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1_Run_State
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;special_sewing
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sewing_stop
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_up
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPmsm1Angle_Adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
</UL>

<P><STRONG><a name="[245]"></a>tra_com</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, communication.o(i.tra_com))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tra_com &rArr; Rs485_WriteEn
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_Transmit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485_WriteEn
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol
</UL>

<P><STRONG><a name="[23c]"></a>trim_action</STRONG> (Thumb, 490 bytes, Stack size 8 bytes, action.o(i.trim_action))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = trim_action &rArr; find_dead_center &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tension_value
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_com
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_logic_output
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_zx
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1_Run_State
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1Control
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sewing_stop
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_to
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_dead_center
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPmsm1Angle_Adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_stop
</UL>

<P><STRONG><a name="[12c]"></a>ui_receive_fsm</STRONG> (Thumb, 356 bytes, Stack size 8 bytes, communication.o(i.ui_receive_fsm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ui_receive_fsm &rArr; verify
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC0_1_IRQHandler
</UL>

<P><STRONG><a name="[27b]"></a>verify</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, communication.o(i.verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = verify
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_receive_fsm
</UL>

<P><STRONG><a name="[244]"></a>verify_code</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, communication.o(i.verify_code))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol
</UL>

<P><STRONG><a name="[21c]"></a>version_check</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, step_motor_drv.o(i.version_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = version_check &rArr; send_dsp2_command &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp2_command
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp1_command
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[223]"></a>wind_status</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, system.o(i.wind_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = wind_status &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_com
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_get_logic_inout
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1_Run_State
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sewing_stop
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_up
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e7]"></a>write_par</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, parameter.o(i.write_par))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = write_par &rArr; app_spiFlash_WritePara &rArr; bsp_SpiFlashWriteBuffer &rArr; bsp_SpiFlashAutoWritePage &rArr; bsp_SpiFlashPageWrite &rArr; bsp_SpiFlashWaitForWriteEnd &rArr; bsp_SpiFlashTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spiFlash_WritePara
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slack_status
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_status
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_status
</UL>

<P><STRONG><a name="[271]"></a>write_para_group</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, parameter.o(i.write_para_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = write_para_group &rArr; app_spiFlash_WritePara &rArr; bsp_SpiFlashWriteBuffer &rArr; bsp_SpiFlashAutoWritePage &rArr; bsp_SpiFlashPageWrite &rArr; bsp_SpiFlashWaitForWriteEnd &rArr; bsp_SpiFlashTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spiFlash_WritePara
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slack_status
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_stepmotor_curve
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_stepmotor_config_para
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_refresh_mc_para
</UL>

<P><STRONG><a name="[26f]"></a>write_stepmotor_config_para</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, step_motor_drv.o(i.write_stepmotor_config_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = write_stepmotor_config_para &rArr; send_dsp2_command &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp_command
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp2_command
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp1_command
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para_group
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slack_status
</UL>

<P><STRONG><a name="[270]"></a>write_stepmotor_curve</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, step_motor_drv.o(i.write_stepmotor_curve))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = write_stepmotor_curve &rArr; read_stepmotor_curve_crc &rArr; send_dsp4_command &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp_command
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_stepmotor_curve_crc
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calcu1
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_para_group
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpy_para_buff
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slack_status
</UL>

<P><STRONG><a name="[1f6]"></a>x_quickmove</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, step_motor_drv.o(i.x_quickmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = x_quickmove &rArr; stepper_motor_move &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_motor_move
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_nop_move_pause
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_setoutpoint
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_commandpoint
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_beginpoint
</UL>

<P><STRONG><a name="[1f5]"></a>y_quickmove</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, step_motor_drv.o(i.y_quickmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = y_quickmove &rArr; stepper_motor_move &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_motor_move
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_nop_move_pause
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_setoutpoint
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_commandpoint
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_beginpoint
</UL>

<P><STRONG><a name="[1ec]"></a>yj_follow_udctos</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, action.o(i.yj_follow_udctos))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;function_1ms_hook
</UL>

<P><STRONG><a name="[25f]"></a>zoom_in_one_stitch</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, action.o(i.zoom_in_one_stitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = zoom_in_one_stitch &rArr; rec_com &rArr; protocol &rArr; single_next &rArr; process_making_pen_signal &rArr;  rec_com (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_com
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_logic_output
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_y
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movestep_x
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1_Run_State
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sewing_stop
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_up
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPmsm1Angle_Adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
</UL>

<P><STRONG><a name="[260]"></a>zpl_process</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, action.o(i.zpl_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = zpl_process &rArr; process_data &rArr; at_solenoid &rArr; set_tension_value &rArr; io_set_logic_output &rArr; io_set_physical_output &rArr; dsp1_output_control &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_get_logic_inout
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_data
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_angle
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_status
</UL>

<P><STRONG><a name="[20b]"></a>zx_quickmove</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, step_motor_drv.o(i.zx_quickmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = zx_quickmove &rArr; stepper_motor_move &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_motor_move
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inpress_to
</UL>

<P><STRONG><a name="[7a]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[2b1]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[2b2]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[127]"></a>XMC_GPIO_SetOutputLow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_init.o(i.XMC_GPIO_SetOutputLow))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[e4]"></a>XMC_GPIO_SetOutputHigh</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_rs485.o(i.XMC_GPIO_SetOutputHigh))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485_WriteEn
</UL>

<P><STRONG><a name="[e2]"></a>XMC_GPIO_SetOutputLow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_rs485.o(i.XMC_GPIO_SetOutputLow))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485_ReceiveEn
</UL>

<P><STRONG><a name="[181]"></a>XMC_USIC_CH_EnableEvent</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_rs485.o(i.XMC_USIC_CH_EnableEvent))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Rs485Init
</UL>

<P><STRONG><a name="[183]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bsp_rs485.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Rs485Init
</UL>

<P><STRONG><a name="[182]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_rs485.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Rs485Init
</UL>

<P><STRONG><a name="[19e]"></a>XMC_USIC_CH_EnableEvent</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_uart.o(i.XMC_USIC_CH_EnableEvent))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_UartInit
</UL>

<P><STRONG><a name="[1a0]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bsp_uart.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_UartInit
</UL>

<P><STRONG><a name="[19f]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_uart.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_UartInit
</UL>

<P><STRONG><a name="[19b]"></a>NVIC_EncodePriority</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, bsp_spibus.o(i.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Spi_Master_Init
</UL>

<P><STRONG><a name="[19d]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bsp_spibus.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Spi_Master_Init
</UL>

<P><STRONG><a name="[19a]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_spibus.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Spi_Master_Init
</UL>

<P><STRONG><a name="[19c]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_spibus.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Spi_Master_Init
</UL>

<P><STRONG><a name="[197]"></a>XMC_DMA_CH_Enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_spiflash.o(i.XMC_DMA_CH_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashTransmit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashReceive
</UL>

<P><STRONG><a name="[194]"></a>XMC_DMA_CH_SetBlockSize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_spiflash.o(i.XMC_DMA_CH_SetBlockSize))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashTransmit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashReceive
</UL>

<P><STRONG><a name="[196]"></a>XMC_DMA_CH_SetDestinationAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_spiflash.o(i.XMC_DMA_CH_SetDestinationAddress))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashTransmit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashReceive
</UL>

<P><STRONG><a name="[195]"></a>XMC_DMA_CH_SetSourceAddress</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_spiflash.o(i.XMC_DMA_CH_SetSourceAddress))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashTransmit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashReceive
</UL>

<P><STRONG><a name="[198]"></a>XMC_SPI_CH_SetTransmitMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_spiflash.o(i.XMC_SPI_CH_SetTransmitMode))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashTransmit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashReceive
</UL>

<P><STRONG><a name="[186]"></a>bsp_SpiFlashAutoWritePage</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, bsp_spiflash.o(i.bsp_SpiFlashAutoWritePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bsp_SpiFlashAutoWritePage &rArr; bsp_SpiFlashPageWrite &rArr; bsp_SpiFlashWaitForWriteEnd &rArr; bsp_SpiFlashTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashReadBuffer
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashPageWrite
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashEraseSector
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashNeedErase
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashCmpData
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashWriteBuffer
</UL>

<P><STRONG><a name="[18b]"></a>bsp_SpiFlashCmpData</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, bsp_spiflash.o(i.bsp_SpiFlashCmpData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsp_SpiFlashCmpData &rArr; bsp_SpiFlashTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashTransmit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashReceive
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashCsnEnable
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashCsnDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashAutoWritePage
</UL>

<P><STRONG><a name="[188]"></a>bsp_SpiFlashNeedErase</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bsp_spiflash.o(i.bsp_SpiFlashNeedErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_SpiFlashNeedErase
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashAutoWritePage
</UL>

<P><STRONG><a name="[190]"></a>bsp_SpiFlashWaitForWriteEnd</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bsp_spiflash.o(i.bsp_SpiFlashWaitForWriteEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsp_SpiFlashWaitForWriteEnd &rArr; bsp_SpiFlashTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashTransmit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashReceive
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashCsnEnable
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashCsnDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashPageWrite
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiFlashEraseSector
</UL>

<P><STRONG><a name="[17b]"></a>XMC_CCU4_SLICE_ClearEvent</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_delay.o(i.XMC_CCU4_SLICE_ClearEvent))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayUs
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMs
</UL>

<P><STRONG><a name="[17c]"></a>XMC_CCU4_SLICE_GetEvent</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bsp_delay.o(i.XMC_CCU4_SLICE_GetEvent))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayUs
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMs
</UL>

<P><STRONG><a name="[17a]"></a>XMC_CCU4_SLICE_SetTimerValue</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_delay.o(i.XMC_CCU4_SLICE_SetTimerValue))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayUs
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DelayMs
</UL>

<P><STRONG><a name="[f4]"></a>SPI_MASTER_lReceivePolling</STRONG> (Thumb, 566 bytes, Stack size 24 bytes, spi_master.o(i.SPI_MASTER_lReceivePolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_MASTER_lReceivePolling &rArr; SPI_MASTER_lStdRBUFFlush
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_WriteToTBUFTCI
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_TXFIFO_PutDataHPCMode
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_RXFIFO_IsEmpty
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_GetTransmitBufferStatus
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_GetReceiveBufferStatus
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_SetTransmitMode
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_ClearStatusFlag
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MASTER_lStdRBUFFlush
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_GetReceivedData
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MASTER_Transfer
</UL>

<P><STRONG><a name="[f6]"></a>SPI_MASTER_lStdRBUFFlush</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spi_master.o(i.SPI_MASTER_lStdRBUFFlush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_MASTER_lStdRBUFFlush
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_GetReceivedData
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MASTER_lReceivePolling
</UL>

<P><STRONG><a name="[fd]"></a>XMC_SPI_CH_ClearStatusFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi_master.o(i.XMC_SPI_CH_ClearStatusFlag))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MASTER_lReceivePolling
</UL>

<P><STRONG><a name="[f5]"></a>XMC_SPI_CH_SetTransmitMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi_master.o(i.XMC_SPI_CH_SetTransmitMode))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MASTER_lReceivePolling
</UL>

<P><STRONG><a name="[fc]"></a>XMC_USIC_CH_GetReceiveBufferStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi_master.o(i.XMC_USIC_CH_GetReceiveBufferStatus))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MASTER_lReceivePolling
</UL>

<P><STRONG><a name="[fa]"></a>XMC_USIC_CH_GetTransmitBufferStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi_master.o(i.XMC_USIC_CH_GetTransmitBufferStatus))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MASTER_lReceivePolling
</UL>

<P><STRONG><a name="[f8]"></a>XMC_USIC_CH_RXFIFO_IsEmpty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spi_master.o(i.XMC_USIC_CH_RXFIFO_IsEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MASTER_lReceivePolling
</UL>

<P><STRONG><a name="[f7]"></a>XMC_USIC_CH_TXFIFO_PutDataHPCMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi_master.o(i.XMC_USIC_CH_TXFIFO_PutDataHPCMode))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MASTER_lReceivePolling
</UL>

<P><STRONG><a name="[fb]"></a>XMC_USIC_CH_WriteToTBUFTCI</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi_master.o(i.XMC_USIC_CH_WriteToTBUFTCI))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MASTER_lReceivePolling
</UL>

<P><STRONG><a name="[74]"></a>SPI_MASTER_0_lInit</STRONG> (Thumb, 334 bytes, Stack size 16 bytes, spi_master_conf.o(i.SPI_MASTER_0_lInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPI_MASTER_0_lInit &rArr; XMC_SPI_CH_Init &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_TXFIFO_SetInterruptNodePointer
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_TXFIFO_Configure
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_RXFIFO_SetInterruptNodePointer
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_RXFIFO_Configure
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_SetInterruptNodePointer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_master_conf.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>CAN_NODE_SetNodeEvents</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, can_node.o(i.CAN_NODE_SetNodeEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN_NODE_SetNodeEvents &rArr; CAN_NODE_SetNodePointer &rArr; XMC_CAN_NODE_SetEventNodePointer
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CAN_NODE_EnableEvent
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_NODE_SetNodePointer
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_NODE_Init
</UL>

<P><STRONG><a name="[97]"></a>CAN_NODE_SetNodePointer</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, can_node.o(i.CAN_NODE_SetNodePointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_NODE_SetNodePointer &rArr; XMC_CAN_NODE_SetEventNodePointer
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CAN_NODE_SetEventNodePointer
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_NODE_SetNodeEvents
</UL>

<P><STRONG><a name="[96]"></a>XMC_CAN_MO_EnableEvent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, can_node.o(i.XMC_CAN_MO_EnableEvent))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_NODE_MO_Init
</UL>

<P><STRONG><a name="[95]"></a>XMC_CAN_MO_SetEventNodePointer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, can_node.o(i.XMC_CAN_MO_SetEventNodePointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XMC_CAN_MO_SetEventNodePointer
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_NODE_MO_Init
</UL>

<P><STRONG><a name="[99]"></a>XMC_CAN_NODE_SetEventNodePointer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, can_node.o(i.XMC_CAN_NODE_SetEventNodePointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XMC_CAN_NODE_SetEventNodePointer
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_NODE_SetNodePointer
</UL>

<P><STRONG><a name="[119]"></a>XMC_GPIO_GetInput</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, watch.o(i.XMC_GPIO_GetInput))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Watch
</UL>

<P><STRONG><a name="[214]"></a>XMC_GPIO_GetInput</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, io_function.o(i.XMC_GPIO_GetInput))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_get_physical_input
</UL>

<P><STRONG><a name="[215]"></a>XMC_GPIO_GetOutput</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, io_function.o(i.XMC_GPIO_GetOutput))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_get_physical_output
</UL>

<P><STRONG><a name="[217]"></a>XMC_GPIO_SetOutputLevel</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, io_function.o(i.XMC_GPIO_SetOutputLevel))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_physical_output
</UL>

<P><STRONG><a name="[219]"></a>XMC_GPIO_ToggleOutput</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, io_function.o(i.XMC_GPIO_ToggleOutput))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_toggle_physical_output
</UL>

<P><STRONG><a name="[20d]"></a>io_sc0719_bsp_init</STRONG> (Thumb, 318 bytes, Stack size 16 bytes, io_function.o(i.io_sc0719_bsp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = io_sc0719_bsp_init &rArr; XMC_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_function_init
</UL>

<P><STRONG><a name="[20e]"></a>io_sc0720_bsp_init</STRONG> (Thumb, 308 bytes, Stack size 16 bytes, io_function.o(i.io_sc0720_bsp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = io_sc0720_bsp_init &rArr; XMC_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_function_init
</UL>

<P><STRONG><a name="[210]"></a>io_sc0720a_bsp_init</STRONG> (Thumb, 302 bytes, Stack size 16 bytes, io_function.o(i.io_sc0720a_bsp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = io_sc0720a_bsp_init &rArr; XMC_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_function_init
</UL>

<P><STRONG><a name="[20f]"></a>io_sc0723_bsp_init</STRONG> (Thumb, 302 bytes, Stack size 16 bytes, io_function.o(i.io_sc0723_bsp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = io_sc0723_bsp_init &rArr; XMC_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_function_init
</UL>

<P><STRONG><a name="[278]"></a>check_motor_cfg_para</STRONG> (Thumb, 458 bytes, Stack size 0 bytes, stepper_function.o(i.check_motor_cfg_para))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_init
</UL>

<P><STRONG><a name="[27a]"></a>check_physical_port_used_or_not</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stepper_function.o(i.check_physical_port_used_or_not))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_init
</UL>

<P><STRONG><a name="[1ef]"></a>get_motor_cfg</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, stepper_function.o(i.get_motor_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_motor_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_refresh_para
</UL>

<P><STRONG><a name="[276]"></a>get_physical_num_and_channel</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, stepper_function.o(i.get_physical_num_and_channel))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_motor_sync_angle
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_get_z_status
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_setup_motor
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_motor_move_sync
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_motor_move
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_check_error
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_pause
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_check_motion_done
</UL>

<P><STRONG><a name="[277]"></a>init_motor_handler_sturct</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, stepper_function.o(i.init_motor_handler_sturct))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_init
</UL>

<P><STRONG><a name="[279]"></a>stepper_setup_motor</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, stepper_function.o(i.stepper_setup_motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = stepper_setup_motor &rArr; send_dsp_command &rArr; spi_read_wirte_lowlevel &rArr; SimulateSpiCmd &rArr; spi_fifo_recISR &rArr; g_SpiMode_CmdTip &rArr; Run_quick &rArr; GetCurve &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_physical_num_and_channel
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dsp_command
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_init
</UL>

<P><STRONG><a name="[238]"></a>_nopmove_get_length</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, nopmove_speed.o(i._nopmove_get_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _nopmove_get_length
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nopmove_calculate_move_time
</UL>

<P><STRONG><a name="[237]"></a>_nopmove_get_speed</STRONG> (Thumb, 148 bytes, Stack size 12 bytes, nopmove_speed.o(i._nopmove_get_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _nopmove_get_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nopmove_calculate_move_time
</UL>

<P><STRONG><a name="[23a]"></a>_nopmove_sort_speed_point</STRONG> (Thumb, 312 bytes, Stack size 20 bytes, nopmove_speed.o(i._nopmove_sort_speed_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _nopmove_sort_speed_point
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nopmove_refresh_para
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nopmove_init
</UL>

<P><STRONG><a name="[239]"></a>nopmove_refresh_para</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, nopmove_speed.o(i.nopmove_refresh_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = nopmove_refresh_para &rArr; app_SpiFlashRead &rArr; bsp_SpiFlashReadBuffer &rArr; bsp_SpiFlashTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_SpiFlashRead
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nopmove_sort_speed_point
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nopmove_init
</UL>

<P><STRONG><a name="[11b]"></a>delay</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, system_xmc4400.o(i.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockSetup
</UL>

<P><STRONG><a name="[13f]"></a>min</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, xmc_can.o(i.min))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CAN_Init
</UL>

<P><STRONG><a name="[148]"></a>XMC_DAC_CH_SetMode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, xmc_dac.o(i.XMC_DAC_CH_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XMC_DAC_CH_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DAC_CH_StartDataMode
</UL>

<P><STRONG><a name="[149]"></a>XMC_DAC_CH_SetTrigger</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, xmc_dac.o(i.XMC_DAC_CH_SetTrigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XMC_DAC_CH_SetTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_DAC_CH_StartDataMode
</UL>

<P><STRONG><a name="[168]"></a>XMC_SPI_CH_ClearStatusFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, xmc_spi.o(i.XMC_SPI_CH_ClearStatusFlag))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_DisableSlaveSelect
</UL>

<P><STRONG><a name="[16f]"></a>XMC_VADC_GROUP_QueueDisableArbitrationSlot</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, xmc_vadc.o(i.XMC_VADC_GROUP_QueueDisableArbitrationSlot))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_QueueInit
</UL>

<P><STRONG><a name="[164]"></a>XMC_SCU_lDelay</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, xmc4_scu.o(i.XMC_SCU_lDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XMC_SCU_lDelay &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_StepSystemPllFrequency
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetBackupClockCalibrationMode
</UL>

<P><STRONG><a name="[12e]"></a>XMC_VADC_GROUP_GetResult</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_adc.o(i.XMC_VADC_GROUP_GetResult))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G0_0_IRQHandler
</UL>

<P><STRONG><a name="[13a]"></a>XMC_VADC_GROUP_QueueInsertChannel</STRONG> (Thumb, 10 bytes, Stack size 12 bytes, bsp_adc.o(i.XMC_VADC_GROUP_QueueInsertChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = XMC_VADC_GROUP_QueueInsertChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC_Config_Init
</UL>

<P><STRONG><a name="[136]"></a>XMC_VADC_GROUP_ResultInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_adc.o(i.XMC_VADC_GROUP_ResultInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XMC_VADC_GROUP_ResultInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC_Config_Init
</UL>

<P><STRONG><a name="[9b]"></a>XMC_GPIO_GetInput</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mc_pmsm.o(i.XMC_GPIO_GetInput))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1PowerOnWatch
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1FindZero
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU40_2_IRQHandler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmsm1_100us_task
</UL>

<P><STRONG><a name="[d9]"></a>XMC_GPIO_SetOutputLow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mc_pmsm.o(i.XMC_GPIO_SetOutputLow))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmsm1Initial
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmsm1_100us_task
</UL>

<P><STRONG><a name="[114]"></a>XMC_CCU8_EnableShadowTransfer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_svpwm.o(i.XMC_CCU8_EnableShadowTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Svpwm_Update
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Pwm
</UL>

<P><STRONG><a name="[273]"></a>CheckOut</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, app_spi.o(i.CheckOut))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_fifo_recISR
</UL>

<P><STRONG><a name="[274]"></a>XMC_GPIO_GetInput</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_spi.o(i.XMC_GPIO_GetInput))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_fifo_recISR
</UL>

<P><STRONG><a name="[e0]"></a>XMC_CCU4_SLICE_StartTimer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_posif.o(i.XMC_CCU4_SLICE_StartTimer))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Posif_Config_Init
</UL>

<P><STRONG><a name="[bd]"></a>XMC_CCU8_EnableClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_svpwm.o(i.XMC_CCU8_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU80_CC80_Config_Init
</UL>

<P><STRONG><a name="[b8]"></a>XMC_CCU8_EnableShadowTransfer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_svpwm.o(i.XMC_CCU8_EnableShadowTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU80_CC80_Config_Init
</UL>

<P><STRONG><a name="[b7]"></a>XMC_CCU8_SLICE_SetShadowTransferMode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bsp_svpwm.o(i.XMC_CCU8_SLICE_SetShadowTransferMode))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU80_CC80_Config_Init
</UL>

<P><STRONG><a name="[b2]"></a>XMC_CCU8_StartPrescaler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_svpwm.o(i.XMC_CCU8_StartPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU80_CC80_Config_Init
</UL>

<P><STRONG><a name="[113]"></a>XMC_CCU8_EnableShadowTransfer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_stepwm.o(i.XMC_CCU8_EnableShadowTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_StepPwm
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepPwm_Update
</UL>

<P><STRONG><a name="[a8]"></a>XMC_CCU4_EnableClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_ccu4.o(i.XMC_CCU4_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU4_Config_Init
</UL>

<P><STRONG><a name="[a6]"></a>XMC_CCU4_EnableShadowTransfer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_ccu4.o(i.XMC_CCU4_EnableShadowTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU4_Config_Init
</UL>

<P><STRONG><a name="[af]"></a>XMC_CCU4_SLICE_SetTimerCompareMatch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_ccu4.o(i.XMC_CCU4_SLICE_SetTimerCompareMatch))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU4_Config_Init
</UL>

<P><STRONG><a name="[a4]"></a>XMC_CCU4_SLICE_SetTimerPeriodMatch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_ccu4.o(i.XMC_CCU4_SLICE_SetTimerPeriodMatch))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU4_Config_Init
</UL>

<P><STRONG><a name="[a1]"></a>XMC_CCU4_StartPrescaler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_ccu4.o(i.XMC_CCU4_StartPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU4_Config_Init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
